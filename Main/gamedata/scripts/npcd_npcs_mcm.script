local npcdu = npcd_utils
MENU_TYPE = {
    ALL = "all",
    RANKED = "ranked",
    SQUAD = "squad",
    RECRUITABLE = "recruitable",
    DEAD = "dead",
    FAVORITE = "favorite",
}
-- off when not in development
NPCS_DEBUG = true

local function is_not_friend(npc_id)
    local npc = npcdu.get_npc_obj(npc_id)
    if not npc then return false end
    return not (npcd_relations.is_actor_not_enemy(db.actor, npc))
end

local function get_npc(npc_id, menu_type)
    -- printf("-[NPCD][MCM] get_npc %s menu_type %s", npc_id, menu_type)
    local npc_deck = npcd.get_npc(npc_id)
    if not npc_deck or not npc_deck.has_profile then return nil end
    if menu_type == MENU_TYPE.SQUAD then
        return npcd_squad.is_actor_squad(npc_id) and npc_deck or nil
    end
    if menu_type == MENU_TYPE.DEAD then
        return not npc_deck.alive and npc_deck or nil
    end
    if menu_type == MENU_TYPE.FAVORITE then
        return npcd.get_favorite(npc_id) and npc_deck or nil
    end
    -- the remaining categories, only show if friends
    if is_not_friend(npc_id) then return nil end
    if menu_type == MENU_TYPE.ALL then
        return npc_deck
    end
    if menu_type == MENU_TYPE.RECRUITABLE then
        return npc_deck.Info.can_recruit and npc_deck or nil
    end
end

local function unfavorite(npc_id, path, self)
    printf("-[NPCD][MCM] unfavorite npc %s path %s", npc_id, path)
    -- local UI_MCM = ui_mcm.get_gui()
    -- if UI_MCM then
    --     npcd.set_favorite(npc_id, false)
    --     printf("-[NPCD][MCM] closing MCM")
    npcd.set_favorite(npc_id, false)
    self:On_Cancel()
    exec_console_cmd("main_menu off")
    CreateTimeEvent("open_mcm", path, 0.1, function() ui_mcm.open_to(path, "npcd") return true end)
    -- end
end

local function get_npcs_menu(menu_type)
    -- printf("-[NPCD][MCM] get_npcs_menu " .. menu_type)
    local npcs_menu = {}

    local npcs_id_list = npcd.get_npcs_id_list()
    -- npcdu.printlog_table("NPCS LIST", npcs_id_list)
    for i = 1, #npcs_id_list do
        -- printf("[NPCD][MCM] build npcs %s menu %s", npcs_id_list[i], i)
        local npc_deck = get_npc(npcs_id_list[i], menu_type)
        if npc_deck then
            -- printf("[NPCD][MCM] found npcs %s", npc_deck.id)
            -- npcdu.printlog_table("NPCS", npc_deck)
            local npc_data = npcd.get_npc_data(npc_deck.id)
            if npc_data then
                -- printf("-[NPCD][MCM] %s adding npcs %s menu", i, npc_deck.id)
                local npc_menu = {id = npc_deck.id, text= npc_data.name, sh=true, gr={}}
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_name", type = "slide", link = "ui_options_slider_player", text = npc_data.name, size = {512,50}, spacing = 5})
                local npc_id = npc_deck.id
                local path = "npcs/" .. menu_type .. "/" .. npc_deck.id
                -- printf("-[NPCD][MCM] adding npcs %s menu path %s", npc_deck.id, path)
                -- unfavorite button
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_unfavorite_button", type = "button", functor_ui = {unfavorite, npc_id, path}, precondition = {npcd.get_favorite, npc_id} , hint = "npcd_npcs_unfavorite"})
                -- info
                -- printf("-[NPCD][MCM] adding npcs %s menu info", npc_deck.id)
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_info", type = "title", clr = {200, 180, 4, 219}, text = game.translate_string("ui_mcm_st_npcd_npcs_info")})
                
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_id", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_id"), npc_deck.id)})

                table.insert(npc_menu.gr, { id = npc_deck.id .. "_community", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_community"), npc_data.community)})
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_rank", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_rank"), npc_data.rank_name, npc_data.rank)})
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_reputation", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_reputation"), game.translate_string(utils_obj.get_reputation_name(npc_data.reputation)), npc_data.reputation)})
                local squad = get_object_squad(npc)
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_squad_id", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_squad_id"), npc_data.squad_id or "")})
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_commander", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_commander"), npc_data.squad_commander)})
                -- npcs info
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_alive", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_alive"), npc_deck.alive)})
                -- table.insert(npc_menu.gr, { id = npc_deck.id .. "_has_profile", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_has_profile"), npc_deck.has_profile)})
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_can_recruit", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_can_recruit"), npc_deck.Info.can_recruit )})
                local last_joined = ""
                if npc_deck.Info.last_joined then
                    local Y, M, D, h, m, s, ms = npc_deck.Info.last_joined:get()
                    last_joined = string.format("%04d-%02d-%02d %02d:%02d:%02d", Y, M, D, h, m, s)
                end
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_last_joined", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_last_joined"), last_joined)})
                local last_time_seen = ""
                if npc_deck.Info.last_time_seen then
                    local Y, M, D, h, m, s, ms = npc_deck.Info.last_time_seen:get()
                    last_time_seen = string.format("%04d-%02d-%02d %02d:%02d:%02d", Y, M, D, h, m, s)
                end
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_last_time_seen", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_last_time_seen"), last_time_seen)})
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_last_place_seen", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_last_place_seen"), npc_deck.Info.last_place_seen or "")})
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_last_place_tracked", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_last_place_tracked"), npc_deck.Info.last_place_tracked or "")})
                
                -- perks
                -- printf("-[NPCD][MCM] adding npcs %s menu perks", npcs_id_list[i])
                table.insert(npc_menu.gr, { id = "divider", type = "line" })
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_perks", type = "title", clr = {200, 180, 4, 219}, text = game.translate_string("ui_mcm_st_npcd_npcs_perks")})
                -- show perks and abilities only if npc was enquired first
                if npc_deck.show_profile or NPCS_DEBUG then
                    for perk_id, _ in pairs(npc_deck.Perk) do
                        local perk = npcd.get_perk(perk_id)
                        if perk then
                                                        -- table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. perk.id, type = "title", clr = {255,250,150,0}, text = perk.name, })
                            table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. perk.id, type = "slide", link = "ui_options_slider_gameplay_diff", text = perk.name, size = {512,50}, spacing = 1, borderless=false, })
                            table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. perk.id .. "_desc", type = "desc", text = game.translate_string(perk.description)})
                        end
                    end

                    -- abilities
                    -- printf("-[NPCD][MCM] adding npcs %s menu abilities", npcs_id_list[i])
                    table.insert(npc_menu.gr, { id = "divider", type = "line" })
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_abilties", type = "title", clr = {200, 180, 4, 219}, text = game.translate_string("ui_mcm_st_npcd_npcs_abilities")})
                    local npc_feats_list = npcd.get_npc_feats(npc_deck.id)
                    for j = 1, #npc_feats_list do
                        local npc_feat = npc_feats_list[j]
                        table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. npc_feat.perk_id .. "_" .. npc_feat.id, type = "slide", link = "ui_options_slider_gameplay_diff", text = npc_feat.name, size = {512,50}, spacing = 5, borderless=true, })
                        -- table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. feat.perk_id .. "_" .. feat.id, type = "desc", text = feat.name})
                        table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. npc_feat.perk_id .. "_" .. npc_feat.id .. "_desc", type = "desc", text = game.translate_string(npc_feat.description)})
                        table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. npc_feat.perk_id .. "_" .. npc_feat.id .. "_rank", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_feat_rank"), npcdu.get_perk_rank(npc_deck.id))})
                        if npc_feat.stats then
                            for key, value in pairs(npc_feat.stats) do
                                local mcm_prefix = "ui_mcm_"
                                local stat_hint
                                if key == npcd.FEAT_SETTING.STAT.COOLDOWN then
                                    stat_hint = "st_npcd_feats_stats_cooldown"
                                elseif key == npcd.FEAT_SETTING.STAT.DURATION then
                                    stat_hint = "st_npcd_feats_stats_duration"
                                else
                                    stat_hint = "npcd_module_" .. npc_feat.perk_module .. "_" .. npc_feat.perk_id .. "_" .. npc_feat.id .. "_" .. key
                                end
                                table.insert(npc_menu.gr, { id = npc_deck.id .. "_" .. npc_feat.perk_id .. "_" .. npc_feat.id .. "_stats_" .. key, type = "desc", text = string.format(game.translate_string(mcm_prefix .. stat_hint) .. ": %s", value)})
                            end
                        end
                    end         
                else
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_perks_info", type = "desc", text = game.translate_string("ui_mcm_st_npcd_npcs_perks_info")})
                end

                -- Standings with actor
                -- printf("-[NPCD][MCM] adding npcs %s menu standings", npcs_id_list[i])
                table.insert(npc_menu.gr, { id = "divider", type = "line" })
                table.insert(npc_menu.gr, { id = npc_deck.id .. "_standings", type = "title", clr = {200, 180, 4, 219}, text = game.translate_string("ui_mcm_st_npcd_npcs_standings")})
                local npc = npcdu.get_npc_obj(npc_deck.id) -- or alife_object(id)
                if npc and type(npc.id) == "function" then
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_attitude", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_attitude"), npc_data.standings.attitude, npcd_relations.get_relation_desc(npc_data.standings.relation) ) })
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_attitude_desc", type = "desc", text = game.translate_string("ui_mcm_st_npcd_npcs_attitude_desc")})
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_goodwil_personal", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_goodwil_personal"), npc_data.standings.goodwill_personal) })
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_goodwil_personal_desc", type = "desc", text = game.translate_string("ui_mcm_st_npcd_npcs_goodwil_personal_desc") })
                    -- table.insert(npc_menu.gr, { id = npc_deck.id .. "_goodwill_rank", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_goodwill_rank"), npc_data.standings.goodwill_rank) })
                    -- table.insert(npc_menu.gr, { id = npc_deck.id .. "_goodwill_reputation", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_goodwill_reputation"), npc_data.standings.goodwill_reputation) })
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_goodwill_actor_faction", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_goodwill_faction"), npc_data.community, npc_data.standings.goodwill_actor_faction) })
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_goodwill_actor_faction_desc", type = "desc", text = game.translate_string("ui_mcm_st_npcd_npcs_goodwill_faction_desc")})
                    -- table.insert(npc_menu.gr, { id = npc_deck.id .. "_goodwill_communities", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_goodwill_communities"), npc_data.standings.goodwill_communities) })
                    -- table.insert(npc_menu.gr, { id = npc_deck.id .. "_sympathy", type = "desc", text = string.format(game.translate_string("ui_mcm_st_npcd_npcs_sympathy"), npc_data.standings.sympathy) })
                else
                    table.insert(npc_menu.gr, { id = npc_deck.id .. "_perks_info", type = "desc", text = game.translate_string("ui_mcm_st_npcd_npcs_standings_info")})
                end
                table.insert(npcs_menu, npc_menu)
                -- printf("-[NPCD][MCM] NPCS Menu size increased to %s", npcdu.tablelength(npcs_menu))
            else
                -- dead npcs
                -- printf("![NPCD][MCM] no game object for npcs %s", npc_deck.id)
            end
        end
    end
    -- npcdu.printlog_table("NPCS Menu", npcs_menu)
    if not (npcdu.tablelength(npcs_menu) > 0) then
        -- printf("[NPCD][MCM] build empty menu")
        local empty_menu = {id = "empty_list", text="Not Found", sh=true, gr={}}
        table.insert(empty_menu.gr, { id = "empty_menu", type = "desc", text = "ui_mcm_st_npcd_npcs_empty_list"})
        table.insert(npcs_menu, empty_menu)
    end
    
    return npcs_menu
end

function on_mcm_load()
    if not npcd_manager.NPCD_BOOTED then return nil end

	op = { 
            id = "npcs", text = "ui_mcm_menu_npcs", gr = {
                { id = MENU_TYPE.SQUAD, text = "ui_mcm_menu_npcd_npcs_" .. MENU_TYPE.SQUAD, gr = get_npcs_menu(MENU_TYPE.SQUAD)},
                { id = MENU_TYPE.FAVORITE, text = "ui_mcm_menu_npcd_npcs_" .. MENU_TYPE.FAVORITE, gr = get_npcs_menu(MENU_TYPE.FAVORITE)},
                { id = MENU_TYPE.ALL, text = "ui_mcm_menu_npcd_npcs_" .. MENU_TYPE.ALL, gr = get_npcs_menu(MENU_TYPE.ALL)},
                { id = MENU_TYPE.RECRUITABLE, text = "ui_mcm_menu_npcd_npcs_" .. MENU_TYPE.RECRUITABLE, gr = get_npcs_menu(MENU_TYPE.RECRUITABLE)},
                { id = MENU_TYPE.DEAD, text = "ui_mcm_menu_npcd_npcs_" .. MENU_TYPE.DEAD, gr = get_npcs_menu(MENU_TYPE.DEAD)},

                --- ranked
                
                },
            }
	return op
end