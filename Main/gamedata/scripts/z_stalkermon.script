-- notifications

print_tip = function(text,delay, ...)

    -- local enabled = dynavision_mcm.get_config('configuration/notifications/enable')
	local enabled = true
    if enabled then
		local text = tostring(text)
		printf(text, ...)
		if not db.actor then
			return
		end
		
		local ico = "ui_inGame2_Dengi_otdani"
		local text_color = utils_xml.get_color("pda_white")
		local arg_color = utils_xml.get_color("d_green")
		local function colorize(s)
			return arg_color .. s .. text_color
		end
		local i = 0
		local t = {...}
		if #t > 0 then
			local function sr(a)
				i = i + 1
				if (type(t[i]) == 'userdata') then
					if (t[i].x and t[i].y) then
						return colorize(vec_to_str(t[i]))
					end
					return colorize('userdata')
				end
				return colorize(tostring(t[i]))
			end
			text = string.gsub(game.translate_string(text), "%%s", sr)
		else
			text = game.translate_string(text)
		end
		text = text_color .. text
		if delay == nil then
			delay = 6000
		end
		news_manager.send_tip(db.actor, text, nil, ico, delay)
	end
end

local stalkers = {}
FIELD = {
	id = "id",
	PERKS = "PERKS",
	rank = "rank"
}

function Add_npc(npc_id)
	if stalkers[npc_id] then return false end
	printf("-- npc %s added", npc_id)
	stalkers[npc_id] = {}
	stalkers[npc_id]["id"] = npc_id
	stalkers[npc_id]["PERKS"] = {}
	return true
end

function Remove_npc(npc_id)
	stalkers[npc_id] = nil
end

function Get_perks(npc_id)
	if not stalkers[npc_id] then return end

	return stalkers[npc_id]["PERKS"]
end

function Get_perk(npc_id, perk_id)
	if not stalkers[npc_id] then return end

	return stalkers[npc_id]["PERKS"][perk_id]
end

function Has_perk(npc_id, perk_id)
	printf("-- npc %s Has_perk", npc_id)
	if not stalkers[npc_id] then return end

	local perk = stalkers[npc_id]["PERKS"][perk_id]
	
	return (perk and (perk.rank > 0)) or false
end

function Roll_perk(npc_id, perk)
	printf("-- npc %s Roll_perk", npc_id)
	if stalkers[npc_id]["PERKS"][perk.id] then return end

	stalkers[npc_id]["PERKS"][perk.id] = {}
	stalkers[npc_id]["PERKS"][perk.id]["id"]  = perk.id
	stalkers[npc_id]["PERKS"][perk.id]["rank"]  = -1

	local roll = perk.functor and execute_func(unpack(perk.functor))
	if roll then
		stalkers[npc_id]["PERKS"][perk.id]["rank"]  = 1
		printf("-- npc %s Roll_perk %s", true)
		return true
	end

	return false
end

function Add_perk(npc_id, perks)

end

function Set_perks(npc_id, perks)
	if not stalkers[npc_id] then return end
	stalkers[npc_id]["PERKS"] = perks
end

local npc_abilities = {}

local function show_cooldown(npc_id, ability)
end

function register_ability(npc_id, ability)
    if not npc_abilities[npc_id] then
        npc_abilities[npc_id] = {}
    end
	printlog_table("register_ability", ability)
    npc_abilities[npc_id][ability.id] = ability
end

function unregister_ability(npc_id, ability)
    if not npc_abilities[npc_id] then return end
	printf("! unregister_ability %s", npc_id)
    npc_abilities[npc_id][ability.id] = nil
end

function unregister_abilities(npc_id)
    npc_abilities[npc_id] = nil
end

function manage_ability_cooldown(npc_id, ability_id)
	if not npc_abilities[npc_id] or not npc_abilities[npc_id][ability_id] then return true end

	if (npc_abilities[npc_id][ability_id].timer == 0 ) then
		printf("! ending time event %s", npc_id)
		return true
	else
		local timer = npc_abilities[npc_id][ability_id].timer
		local cooldown = npc_abilities[npc_id][ability_id].cooldown
		printf("// [tg][%s] manage_ability %s cooldown %s/%s", time_global(), ability_id, timer, cooldown)
		npc_abilities[npc_id][ability_id].timer = npc_abilities[npc_id][ability_id].timer - 1
		CreateTimeEvent("spotter_coolddown", tostring(npc_id) .. ability_id .. "_" .. tostring(timer), 1, manage_ability_cooldown, npc_id, ability_id)
		return true
	end
	
end

function activate_ability(npc_id, ability)
	printf("! activate_ability %s", ability)
    if not npc_id or not ability or not ability.id then return end
    if not npc_abilities[npc_id] or not npc_abilities[npc_id][ability.id] then return end

	npc_abilities[npc_id][ability.id].timer = npc_abilities[npc_id][ability.id].cooldown

	CreateTimeEvent("spotter_coolddown", tostring(npc_id) .. ability.id, 1, manage_ability_cooldown, npc_id, ability.id)
end


function actor_on_update()
end

function on_game_start() 
    RegisterScriptCallback("actor_on_update",actor_on_update)
end

og_axr_companions_UI_InitControls = axr_companions.UICompanionList.InitControls
function axr_companions.UICompanionList:InitControls()
	printf("-- UICompanionList:InitControls")
	local xml = utils_xml.get_hud_xml()
	self.xml = xml
	self.xml_sm = CScriptXmlInit()
	self.xml_sm:ParseFile("ui_stalkermon_hud.xml")
	self.dialog = xml:InitStatic("companion_list", self)
	--utils_xml.correct_ratio(self.dialog, true)

	self.companion_info = {}
	for i=1,8 do
		self.companion_info[i]                   = {}
		self.companion_info[i].base              = xml:InitStatic("companion_list:slot", self.dialog)
		self.companion_info[i].background        = xml:InitStatic("companion_list:slot:background", self.companion_info[i].base)
		self.companion_info[i].icon        		 = xml:InitStatic("companion_list:slot:icon", self.companion_info[i].base)
		self.companion_info[i].danger_indicator  = xml:InitStatic("companion_list:slot:danger_indicator", self.companion_info[i].base)
		self.companion_info[i].team_role_shadow  = xml:InitStatic("companion_list:slot:team_role", self.companion_info[i].base)
		self.companion_info[i].team_role         = xml:InitStatic("companion_list:slot:team_role", self.companion_info[i].base)
		self.companion_info[i].distance          = xml:InitTextWnd("companion_list:slot:distance", self.companion_info[i].base)
		self.companion_info[i].prog_health       = xml:InitProgressBar("companion_list:slot:health", self.companion_info[i].base)
		for _,ele in pairs(self.companion_info[i]) do
			utils_xml.correct_ratio(ele)
		end		
		-- stalkermon
		self.companion_info[i].abilities = {} -- = xml:InitStatic("companion_list:slot:icon", self.companion_info[i].base)
		-- self.companion_info[i].abilities:SetWndSize(vector2():set( 100, 25 ))

		--
		local h = self.companion_info[i].background:GetHeight()
		self.companion_info[i].distance:SetFont(GetFontSmall())
		self.companion_info[i].base:SetWndPos( vector2():set( 0 , (8-i)*(h+10) ) )
		
		local pos = self.companion_info[i].team_role:GetWndPos()
		self.companion_info[i].team_role_shadow:SetWndPos( vector2():set( pos.x + 1 , pos.y + 2 ) )
		self.companion_info[i].team_role_shadow:SetTextureColor( GetARGB(255, 0, 0, 0) )
	end
	-- stalkermon
	-- self.abilities_ribbon = {}
	--
end

og_axr_companions_UI_Update = axr_companions.UICompanionList.Update
function axr_companions.UICompanionList:Update(force)
	CUIScriptWnd.Update(self)
	
	local tg = time_global()
	if force then
		self._tmr = tg - 1
	end
	if self._tmr >= tg then
		return
	end
	self._tmr = tg + self.update_rate
	
	self.ratio  = utils_xml.screen_ratio()
	self.scale  = 0.75
	self.index  = 0
	self.W      = 40
	self.offset = 10
	-- printf("-- UICompanionList:Update")
	-- spotter_mcm.printlog_table("npc_abilities", npc_abilities)
	local to_show = main_hud_shown()
	local clist = axr_companions.list_actor_squad_by_id()
	for i=1,8 do
		local se_obj = clist[i] and alife_object(clist[i])
		if to_show and (se_obj and IsStalker(nil,se_obj:clsid()) and se_obj:alive()) then
			local st = db.storage[se_obj.id]
			local npc = st and st.object
			local ele = self.companion_info[i]
			
			-- Icon
			local icon_name = npc and npc:character_icon() or se_obj:character_icon()
			icon_name = icon_name and icon_name ~= "" and icon_name or "ui\\ui_noise"
			ele.icon:InitTexture(icon_name)
			
			-- Distance
			ele.distance:SetText(string.format("%.2f M", se_obj.position:distance_to(db.actor:position())))

			-- Leader and relation status
			local squad = se_obj.group_id and se_obj.group_id ~= 65535 and alife_object(se_obj.group_id)
			if (squad and squad:commander_id() == se_obj.id) then
				ele.team_role:InitTexture("ui_minimap_squad_leader")
				ele.team_role_shadow:InitTexture("ui_minimap_squad_leader")
			else
				ele.team_role:InitTexture("ui_minimap_point")
				ele.team_role_shadow:InitTexture("ui_minimap_point")
			end
			
			local community = npc and npc:character_community()
			local clr = community and self.clr_list[community] or self.clr_list["def"]
			ele.team_role:SetTextureColor(clr)
			
			-- Health
			if (npc) then 
				local health = clamp( round_idp(npc.health,1),0,1)
				printf("health %s", health)
				ele.prog_health:SetProgressPos( health )
			end
			
			-- Danger state
			ele.danger_indicator:Show(npc and npc:best_enemy() and true or false)
			
			-- stakermon abilities ribbon
			local npc_id = se_obj.id

			if ele.abilities[npc_id] then
				printf("-- UICompanionList NPC %s remove abilities", npc_id)
				for a_id, a_ele in pairs(ele.abilities[npc_id]) do
					
					if not npc_abilities[npc_id][a_id] or npc_abilities[npc_id][a_id].timer == 0 then
						printf("-- NPC %s remove ability %s ", npc_id, a_id)
						a_ele.icon:Show(false)
						a_ele.icon = nil
						a_ele.cd:Show(false)
						a_ele.cd = nil
						ele.abilities[npc_id][a_id] = nil
					end
				end
				-- self.abilities_ribbon[npc_id] = nil
			end
			
			if npc_abilities[npc_id] then
				-- printf("-- UICompanionList NPC %s has abilities", npc_id)
				if not ele.abilities[npc_id] then
					printf("Init npc %s abilities ribbon", npc_id)
					ele.abilities[npc_id] = {}
				end
				local j = 2
				for a_id, ability in pairs(npc_abilities[npc_id]) do
					-- printf("-- UICompanionList NPC abilitiy %s", ability.id)
					if ability.timer and ability.timer > 0 then
						-- init if it is new or has changed position in the ribbon
						if not ele.abilities[npc_id][a_id] or ele.abilities[npc_id][a_id].index ~= j or ability.timer == 5 then
							-- delete from hud
							if ele.abilities[npc_id][a_id] then
								ele.abilities[npc_id][a_id].icon:Show(false)
								ele.abilities[npc_id][a_id].icon = nil
								ele.abilities[npc_id][a_id].cd:Show(false)
								ele.abilities[npc_id][a_id].cd = nil
							end
							-- init icon cooldown progress bar
							printf("-- Init npc %s ability %s", npc_id, a_id)
							ele.abilities[npc_id][a_id] = {}
							-- ability index: stores the position where it is created, in the ability ribbon. If it happens to change it will be re-initialized to the new position   
							ele.abilities[npc_id][a_id].index = j
							-- ability icon
							if ability.timer > 5 then
								ele.abilities[npc_id][a_id].icon = self.xml_sm:InitStatic("abilities:static", ele.base)
							else
								ele.abilities[npc_id][a_id].icon = self.xml_sm:InitStatic("abilities:flashing", ele.base)
							end
							ele.abilities[npc_id][a_id].icon:InitTexture(ability.icon)
							ele.abilities[npc_id][a_id].icon:SetWndSize(vector2():set(ele.abilities[npc_id][a_id].icon:GetWidth() * self.scale, ele.abilities[npc_id][a_id].icon:GetHeight() * self.scale ))
							-- position
							local x = (j-1)*(self.W + self.offset) * self.scale
							-- printf("ability %s x = %s", ability.id, x)
							ele.abilities[npc_id][a_id].icon:SetWndPos( vector2():set( 0-x , 0 ) )
							-- ability cooldown							
							ele.abilities[npc_id][a_id].cd = self.xml_sm:InitProgressBar("abilities:cooldown", ele.abilities[npc_id][a_id].icon)
							ele.abilities[npc_id][a_id].cd:SetWndSize(vector2():set(ele.abilities[npc_id][a_id].icon:GetWidth(), ele.abilities[npc_id][a_id].icon:GetHeight() ))
							-- set ratio
							utils_xml.correct_ratio(ele.abilities[npc_id][a_id].icon)
							utils_xml.correct_ratio(ele.abilities[npc_id][a_id].cd)
							-- show
							ele.abilities[npc_id][a_id].icon:Show(true)
							ele.abilities[npc_id][a_id].cd:Show(true)
						end
						printf("update CD bar=%s",bar)
						local bar = ( (ability.timer == 0) and 0) or (ability.timer / ability.cooldown )
						ele.abilities[npc_id][a_id].cd:SetProgressPos(bar)
						--
						j = j + 1
					else
						-- ele.abilities[npc_id][a_id].icon:Show(false)
						-- ele.abilities[npc_id][a_id].icon = nil
						-- ele.abilities[npc_id][a_id].cd:Show(false)
						-- ele.abilities[npc_id][a_id].cd = nil
					end
				end
        		-- ele.abilities:Show(true)
			end
			self.companion_info[i].base:Show(true)
		else 
			self.companion_info[i].base:Show(false)
		end
	end
end


--------------- SQUAD UPDATES
---
-- ADD

axrc_OG_add_special_task_npc_to_actor_squad = axr_companions.add_special_task_npc_to_actor_squad
function axr_companions.add_special_task_npc_to_actor_squad(npc)
	-- printf("-- MP add_special_task_npc_to_actor_squad")
	axrc_OG_add_special_task_npc_to_actor_squad(npc)
	SendScriptCallback("stalkermon_squad_update")
end

axrc_OG_add_special_squad = axr_companions.add_special_squad
function axr_companions.add_special_squad(npc)
	-- printf("-- MP add_special_squad")
	axrc_OG_add_special_squad(npc)
	SendScriptCallback("stalkermon_squad_update")
end

axrc_OG_add_to_actor_squad = axr_companions.add_to_actor_squad
function axr_companions.add_to_actor_squad(npc)
    -- printf("-- MP add_to_actor_squad")
    axrc_OG_add_to_actor_squad(npc)
    SendScriptCallback("stalkermon_squad_update")
end

-- REMOVE

axrc_OG_remove_from_actor_squad = axr_companions.remove_from_actor_squad
function axr_companions.remove_from_actor_squad(npc)
	axrc_OG_remove_from_actor_squad(npc)
	SendScriptCallback("stalkermon_squad_update")
end

axrc_OG_remove_all_from_actor_squad = axr_companions.remove_all_from_actor_squad
function axr_companions.remove_all_from_actor_squad(npc)
	axrc_OG_remove_all_from_actor_squad(npc)
	SendScriptCallback("stalkermon_squad_update")
end

-- DEATH

local function squad_on_npc_death(squad,se_npc)
	local npc = db.storage[se_npc.id] and db.storage[se_npc.id].object
	if not npc then return end
	-- printf("squad_on_npc_death name %s", npc and npc:name())
	local npc_id = npc:id() or 0
	Remove_npc(npc_id)
	for id,actor_squad in pairs(axr_companions.companion_squads) do
		if squad.id == actor_squad.id then
			SendScriptCallback("stalkermon_squad_update")
		end
	end
end


-- STATE MGMT

local string_format = string.format
function printlog_table(text, node, ...)
    
    text = string_format(text, ...)
    printf("STALKERMON: | %s | \n" .. utils_data.print_table(node, text, true), time_global(), ...)
end

function save_state(m_data)
	printf("$ STALKERMON Save State")
    if not m_data.stalkermon then
        m_data.stalkermon = {}
    end 
    -- save the state
    m_data.stalkermon.stalkers = stalkers
	printlog_table("STALKERMON", m_data.stalkermon.stalkers)
end

function load_state(m_data)
	printf("$ STALKERMON Load State")
	if m_data.stalkermon and m_data.stalkermon.stalkers then
        -- cache the state
		stalkers = m_data.stalkermon.stalkers
		printlog_table("Stalkers", stalkers)
	end
end


if AddScriptCallback then
	AddScriptCallback("stalkermon_squad_update")
end

function on_game_start()
	RegisterScriptCallback("squad_on_npc_death",squad_on_npc_death)
end