
npcdu = ncpd_utils

local STATE = npcd.ABILITY_STATE


local HUD_MODE = {
	STATIC = "STATIC",
	FLASHING = "FLASHING"
}

function add_ability_to_hud(self, ability, companion_hud, index, mode)

	local npc_id = companion_hud.name:GetText()
	local a_id = ability.id

	-- delete current statics from hud
	if companion_hud.abilities[a_id] then
		companion_hud.abilities[a_id].icon:Show(false)
		companion_hud.abilities[a_id].icon = nil
		companion_hud.abilities[a_id].cd:Show(false)
		companion_hud.abilities[a_id].cd = nil
	end

	printf("-- Init npc %s ability %s", npc_id, a_id)
	companion_hud.abilities[a_id] = {}
	local ui_ability = companion_hud.abilities[a_id]
	-- ability index: stores the position where it is created, in the ability ribbon. If it happens to change it will be re-initialized to the new position   
	ui_ability.index = index
	-- ability icon
	if mode == HUD_MODE.STATIC then
		printf("-- Init STATIC npc %s ability %s", npc_id, a_id)
		ui_ability.icon = self.xml_sm:InitStatic("abilities:static", companion_hud.base)
		ui_ability.state = STATE.COOLDOWN
	else
		printf("-- Init FLASHING npc %s ability %s", npc_id, a_id)
		ui_ability.icon = self.xml_sm:InitStatic("abilities:flashing", companion_hud.base)
		ui_ability.state = STATE.READING
	end
	ui_ability.icon:InitTexture(ability.icon)
	ui_ability.icon:SetWndSize(vector2():set(ui_ability.icon:GetWidth() * self.scale, ui_ability.icon:GetHeight() * self.scale ))
	-- position
	local x = (index-1)*(self.W + self.offset) * self.scale
	-- printf("ability %s x = %s", ability.id, x)
	ui_ability.icon:SetWndPos( vector2():set( 0-x , 0 ) )
	-- ability cooldown							
	ui_ability.cd = self.xml_sm:InitProgressBar("abilities:cooldown", ui_ability.icon)
	ui_ability.cd:SetWndSize(vector2():set(ui_ability.icon:GetWidth(), ui_ability.icon:GetHeight() ))
	-- set ratio
	utils_xml.correct_ratio(ui_ability.icon)
	utils_xml.correct_ratio(ui_ability.cd)
	-- show
	ui_ability.icon:Show(true)
	ui_ability.cd:Show(true)

	return companion_hud
end

og_axr_companions_UI_InitControls = axr_companions.UICompanionList.InitControls
function axr_companions.UICompanionList:InitControls()
	printf("-- UICompanionList:InitControls")
	local xml = utils_xml.get_hud_xml()
	self.xml = xml
	self.xml_sm = CScriptXmlInit()
	self.xml_sm:ParseFile("ui_npcd_hud.xml")
	self.dialog = xml:InitStatic("companion_list", self)
	--utils_xml.correct_ratio(self.dialog, true)

	self.companion_info = {}
	for i=1,8 do
		self.companion_info[i]                   = {}
		self.companion_info[i].base              = xml:InitStatic("companion_list:slot", self.dialog)
		self.companion_info[i].background        = xml:InitStatic("companion_list:slot:background", self.companion_info[i].base)
		self.companion_info[i].icon        		 = xml:InitStatic("companion_list:slot:icon", self.companion_info[i].base)
		self.companion_info[i].danger_indicator  = xml:InitStatic("companion_list:slot:danger_indicator", self.companion_info[i].base)
		self.companion_info[i].team_role_shadow  = xml:InitStatic("companion_list:slot:team_role", self.companion_info[i].base)
		self.companion_info[i].team_role         = xml:InitStatic("companion_list:slot:team_role", self.companion_info[i].base)
		self.companion_info[i].distance          = xml:InitTextWnd("companion_list:slot:distance", self.companion_info[i].base)
		self.companion_info[i].prog_health       = xml:InitProgressBar("companion_list:slot:health", self.companion_info[i].base)
		self.companion_info[i].name          	 = xml:InitTextWnd("companion_list:slot:distance", self.companion_info[i].base)
		for _,ele in pairs(self.companion_info[i]) do
			utils_xml.correct_ratio(ele)
		end		
		-- npcd
		-- self.companion_info[i].name:SetFont(GetFontSmall())  - self.companion_info[i].icon:GetWidth()/2
		self.companion_info[i].name:SetWndSize(vector2():set( self.companion_info[i].name:GetWidth() + 30, self.companion_info[i].name:GetHeight()))
		self.companion_info[i].name:SetTextAlignment(0)
		self.companion_info[i].name:SetWndPos( vector2():set( self.companion_info[i].distance:GetWndPos().x , self.companion_info[i].distance:GetWndPos().y + self.companion_info[i].icon:GetHeight()/2 ) )
		self.companion_info[i].abilities = {} -- = xml:InitStatic("companion_list:slot:icon", self.companion_info[i].base)
		-- self.companion_info[i].abilities:SetWndSize(vector2():set( 100, 25 ))

		--
		local h = self.companion_info[i].background:GetHeight()
		self.companion_info[i].distance:SetFont(GetFontSmall())
		self.companion_info[i].base:SetWndPos( vector2():set( 0 , (8-i)*(h+10) ) )
		local pos = self.companion_info[i].team_role:GetWndPos()
		self.companion_info[i].team_role_shadow:SetWndPos( vector2():set( pos.x + 1 , pos.y + 2 ) )
		self.companion_info[i].team_role_shadow:SetTextureColor( GetARGB(255, 0, 0, 0) )
	end
end

og_axr_companions_UI_Update = axr_companions.UICompanionList.Update
function axr_companions.UICompanionList:Update(force)
	CUIScriptWnd.Update(self)
	
	local tg = time_global()
	if force then
		self._tmr = tg - 1
	end
	if self._tmr >= tg then
		return
	end
	self._tmr = tg + 1000
	
	self.ratio  = utils_xml.screen_ratio()
	self.scale  = 0.75
	self.index  = 0
	self.W      = 40
	self.offset = 10
	-- printf("-- UICompanionList:Update")
	local to_show = main_hud_shown()
	local clist = axr_companions.list_actor_squad_by_id()
	for i=1,8 do
		local se_obj = clist[i] and alife_object(clist[i])
		if to_show and (se_obj and IsStalker(nil,se_obj:clsid()) and se_obj:alive()) then
			local st = db.storage[se_obj.id]
			local npc = st and st.object
			local ele = self.companion_info[i]
			ele.npc_id = se_obj.id
			-- Icon
			local icon_name = npc and npc:character_icon() or se_obj:character_icon()
			icon_name = icon_name and icon_name ~= "" and icon_name or "ui\\ui_noise"
			ele.icon:InitTexture(icon_name)
			
			-- Distance
			ele.distance:SetText(string.format("%.2f M", se_obj.position:distance_to(db.actor:position())))
			
			-- Name
			ele.name:SetText(npc:character_name())

			-- Leader and relation status
			local squad = se_obj.group_id and se_obj.group_id ~= 65535 and alife_object(se_obj.group_id)
			if (squad and squad:commander_id() == se_obj.id) then
				ele.team_role:InitTexture("ui_minimap_squad_leader")
				ele.team_role_shadow:InitTexture("ui_minimap_squad_leader")
			else
				ele.team_role:InitTexture("ui_minimap_point")
				ele.team_role_shadow:InitTexture("ui_minimap_point")
			end
			
			local community = npc and npc:character_community()
			local clr = community and self.clr_list[community] or self.clr_list["def"]
			ele.team_role:SetTextureColor(clr)
			
			-- Health
			if (npc) then 
				local health = clamp( round_idp(npc.health,1),0,1)
				ele.prog_health:SetProgressPos( health )
			end
			
			-- Danger state
			ele.danger_indicator:Show(npc and npc:best_enemy() and true or false)
			
			-- npcd abilities hud
			local npc_id = se_obj.id
			-- printf("% npc_id = %s", npc_id)
			local abi_hud_count = ele.abilities and npcdu.tablelength(ele.abilities) or 0
			if abi_hud_count > 0 then
				-- printf("* UICompanionList NPC %s clear HUD abilities", ele.name:GetText())
				for a_id, a_ele in pairs(ele.abilities) do
					local ability = npcd.get_npc_ability(npc_id, a_id)
					
					if not ability or ability.state == STATE.READY then
						-- printf("! NPC %s remove ability %s ", npc_id, a_id)
						a_ele.icon:Show(false)
						a_ele.icon = nil
						a_ele.cd:Show(false)
						a_ele.cd = nil
						ele.abilities[a_id] = nil
					end
				end
			end
			
			if npcd.has_npc_abilities(npc_id) then
				-- printf("* UICompanionList NPC %s has abilities", ele.name:GetText())
				local index = 2
				local npc_abilities = npcd.get_npc_abilities(npc_id)
				-- if npc_abilities then npcdu.printlog_table("NPDC", npc_abilities) end
				for a_id, ability in pairs(npc_abilities) do
					-- printf("* UICompanionList NPC abilitiy %s state %s", ability.id, ability.state)
					if ability.state ~= STATE.READY then
						-- init if it is new or has changed position in the ribbon
						-- printf("/ npc %s ability %s state %s/%s",ele.name:GetText(), a_id, ability.state, ele.abilities[a_id] and ele.abilities[a_id].state or nil)
						if not ele.abilities[a_id] or ele.abilities[a_id].index ~= index or (ability.state ~= ele.abilities[a_id].state) then
							add_ability_to_hud(self, ability, ele, index, ability.state == STATE.COOLDOWN and HUD_MODE.STATIC or HUD_MODE.FLASHING)
						end
						local bar = ( (ability.timer == 0) and 0) or (ability.timer / ability.cooldown )
						-- printf("update CD bar=%s",bar)
						ele.abilities[a_id].cd:SetProgressPos(bar)
						--
						index = index + 1
					end
				end
			end
			self.companion_info[i].base:Show(true)
		else 
			self.companion_info[i].base:Show(false)
		end
	end
end