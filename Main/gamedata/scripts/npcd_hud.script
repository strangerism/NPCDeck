
local npcdu = npcd_utils

function get_printer()
	if not Printer then
		Printer = npcd_logging.get_printer("npcd_hud")
	end 
	LOG = Printer:GetLogTypes()
	CAT = Printer:GetLogCategories()
end
if AddScriptCallback then
	RegisterScriptCallback("npcd_on_log_update", get_printer)
end

local ABILITY_STATE = npcd.ABILITY_STATE

local HUD_MODE = {
	STATIC = "STATIC",
	FLASHING = "FLASHING"
}

local function is_ability_readying(ability)
	return ability.timer > 0 and ability.timer <= 5
end

local function get_hud_mode(ability)
	if is_ability_readying(ability) then
		return HUD_MODE.FLASHING
	else
		return HUD_MODE.STATIC
	end
end

function add_ability_to_hud(self, ability, companion_hud, index)

	local npc_id = companion_hud.name:GetText()
	local a_id = ability.id

	-- delete current statics from hud
	if companion_hud.abilities[a_id] then
		companion_hud.abilities[a_id].icon:Show(false)
		companion_hud.abilities[a_id].icon = nil
		companion_hud.abilities[a_id].cd:Show(false)
		companion_hud.abilities[a_id].cd = nil
	end

	Printer:Trace(LOG.INFO, CAT.UI,"Init npc %s ability %s", npc_id, a_id)
	companion_hud.abilities[a_id] = {}
	local ui_ability = companion_hud.abilities[a_id]
	-- ability index: stores the position where it is created, in the ability ribbon. If it happens to change it will be re-initialized to the new position   
	ui_ability.index = index
	local mode = get_hud_mode(ability)
	-- ability icon
	if mode == HUD_MODE.STATIC then
		Printer:Trace(LOG.INFO, CAT.UI,"Init STATIC npc %s ability %s", npc_id, a_id)
		ui_ability.icon = self.npcd_xml:InitStatic("abilities:static", companion_hud.base)
		ui_ability.state = ABILITY_STATE.COOLDOWN
	else
		Printer:Trace(LOG.INFO, CAT.UI,"Init FLASHING npc %s ability %s", npc_id, a_id)
		ui_ability.icon = self.npcd_xml:InitStatic("abilities:flashing", companion_hud.base)
		ui_ability.state = "READYING"
	end
	ui_ability.icon:InitTexture(ability.icon)
	ui_ability.icon:SetWndSize(vector2():set(ui_ability.icon:GetWidth() * self.scale, ui_ability.icon:GetHeight() * self.scale ))
	-- position
	local x = (index-1)*(self.W + self.offset) * self.scale
	-- Printer:Trace(LOG.INFO, CAT.UI,"ability %s x = %s", ability.id, x)
	ui_ability.icon:SetWndPos( vector2():set( 0-x , 0 ) )
	-- ability cooldown							
	ui_ability.cd = self.npcd_xml:InitProgressBar("abilities:cooldown", ui_ability.icon)
	ui_ability.cd:SetWndSize(vector2():set(ui_ability.icon:GetWidth(), ui_ability.icon:GetHeight() ))
	-- set ratio
	utils_xml.correct_ratio(ui_ability.icon)
	utils_xml.correct_ratio(ui_ability.cd)
	-- show
	ui_ability.icon:Show(true)
	ui_ability.cd:Show(true)

	return companion_hud
end

og_axr_companions_UI_InitControls = axr_companions.UICompanionList.InitControls
function axr_companions.UICompanionList:InitControls()
	og_axr_companions_UI_InitControls(self)
	local xml = utils_xml.get_hud_xml()
	self.npcd_xml = CScriptXmlInit()
	self.npcd_xml:ParseFile("ui_npcd_hud.xml")
	self._tmr_npcd = time_global()
	for i=1,8 do
		self.companion_info[i].name          	 = xml:InitTextWnd("companion_list:slot:distance", self.companion_info[i].base)
		utils_xml.correct_ratio(self.companion_info[i].name)
		self.companion_info[i].name:SetWndSize(vector2():set( self.companion_info[i].name:GetWidth() + 30, self.companion_info[i].name:GetHeight()))
		self.companion_info[i].name:SetTextAlignment(0)
		self.companion_info[i].name:SetWndPos( vector2():set( self.companion_info[i].distance:GetWndPos().x , self.companion_info[i].distance:GetWndPos().y + self.companion_info[i].icon:GetHeight()/2 ) )
		
		self.companion_info[i].abilities = {}
	end
end

og_axr_companions_UI_Update = axr_companions.UICompanionList.Update
function axr_companions.UICompanionList:Update(force)
	local to_show = main_hud_shown()
	if not to_show then return end
	og_axr_companions_UI_Update(self, force)
	
	local tg = time_global()
	if force then
		self._tmr_npcd = tg - 1
	end
	if self._tmr_npcd >= tg then
		return
	end
	self._tmr_npcd = tg + 1000
	
	
	self.ratio  = utils_xml.screen_ratio()
	self.scale  = 0.75
	self.index  = 0
	self.W      = 40
	self.offset = 10
	if not npcd_squad.squad_available() then return end

	-- Printer:Debug(LOG.INFO, CAT.UI,"UICompanionList:Update")
	local clist = npcd_squad.squad_get_clist()
	for i=1,8 do
        local npc = npcdu.get_npc_obj(clist[i])
		if npc and IsStalker(npc) and npc:alive() then
			local npc_id = npc:id()
			local ele = self.companion_info[i]
			ele.npc_id = npc_id

			-- Name
			ele.name:SetText(npc:character_name())

			-- npcd abilities hud
			-- Printer:Trace(LOG.INFO, CAT.UI,"npc_id = %s", npc_id)
			local abi_hud_count = ele.abilities and npcdu.tablelength(ele.abilities) or 0
			if abi_hud_count > 0 then
				-- Printer:Trace(LOG.INFO, CAT.UI,"UICompanionList NPC %s clear HUD abilities", ele.name:GetText())
				for a_id, a_ele in pairs(ele.abilities) do
					local ability = npcd.get_ability(npc_id, a_id)
					
					if not ability or ability.state == ABILITY_STATE.READY then
						Printer:Trace(LOG.REMOVE, CAT.UI,"! NPC %s remove ability %s ", npc_id, a_id)
						a_ele.icon:Show(false)
						a_ele.icon = nil
						a_ele.cd:Show(false)
						a_ele.cd = nil
						ele.abilities[a_id] = nil
					end
				end
			end
			
			if npcd.has_abilities(npc_id) then
				-- Printer:Trace(LOG.INFO, CAT.UI,"UICompanionList NPC %s has abilities", ele.name:GetText())
				local index = 2
				local npc_abilities = npcd.get_abilities(npc_id)
				-- if npc_abilities then Printer:LogTable("NPDC", npc_abilities) end
				for a_id, ability in pairs(npc_abilities) do
					-- Printer:Trace(LOG.INFO, CAT.UI,"UICompanionList NPC abilitiy %s state %s", ability.id, ability.state)
					if ability.state ~= ABILITY_STATE.READY then
						-- init if it is new or has changed position in the ribbon
						Printer:Trace(LOG.INFO, CAT.UI,"npc %s ability %s state %s/%s",ele.name:GetText(), a_id, ability.state, ele.abilities[a_id] and ele.abilities[a_id].state or nil)
						if not ele.abilities[a_id] or ele.abilities[a_id].index ~= index or (ability.state ~= ele.abilities[a_id].state) then
							add_ability_to_hud(self, ability, ele, index)
						end
						local bar = ( (ability.timer == 0) and 0) or (ability.timer / ability.cooldown )
						Printer:Trace(LOG.INFO, CAT.UI,"update CD bar=%s",bar)
						ele.abilities[a_id].cd:SetProgressPos(bar)
						--
						index = index + 1
					end
				end
			end
			self.companion_info[i].base:Show(true)
		else 
			self.companion_info[i].base:Show(false)
		end
	end
end