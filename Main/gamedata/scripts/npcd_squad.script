local npcdu = npcd_utils

function get_printer()
	printf("npcd_squad get_printer callback")
	if not Printer then
		Printer = npcd_logging.get_printer("npcd_squad")
	end 
	LOG = Printer:GetLogTypes()
	CAT = Printer:GetLogCategories()
end
if AddScriptCallback then
	printf("npcd_squad registering logger callback")
	RegisterScriptCallback("npcd_on_log_update", get_printer)
end

--------------- SQUAD STATE

local Squad_Info = {
	combat = false,
	size = 0,
	non_task_companions = 0,
	clist = {}
}

local function reset_squad_info()
	Squad_Info = {
		combat = false,
		size = 0,
		non_task_companions = 0,
		clist = {},
		available = false
	}
end

local function update_axr_companions_info()
    local clist = axr_companions.list_actor_squad_by_id()
	Squad_Info.size = npcdu.tablelength(clist)
    if not (Squad_Info.size > 0) then
        Printer:Trace(LOG.WARN, CAT.NPC, "no squad available at this time")
		reset_squad_info()
	else
		Squad_Info.non_task_companions = axr_companions.get_companion_count()
		Squad_Info.clist = clist
		Squad_Info.available = true
		Printer:Trace(LOG.INFO, CAT.NPC, "squad count %s - non tasks companions %s", Squad_Info.size, Squad_Info.non_task_companions)
	end
end

--------------- SQUAD Queries

function squad_get_clist()
	return Squad_Info.clist
end

function squad_get_combat()
	return Squad_Info.combat
end

function squad_get_size()
	return Squad_Info.size
end

function squad_get_nontask_size()
	return Squad_Info.non_task_companions
end

function squad_available()
	return Squad_Info.available
end

function is_actor_squad(npc_id)
	local clist = squad_get_clist()
	for i = 1, #clist do
		if clist[i] == npc_id then return true end
	end
	return false
end

--------------- SQUAD MGMT API

function update_squad_info()
	local squad_is_peaceful = true
	update_axr_companions_info()
	local clist = Squad_Info.clist
	for i=1, #clist do
		local npc = npcdu.get_npc_obj(clist[i])
		if npc then
			local is_peaceful = false
			-- check if is in fight
			if npc:alive() then
				is_peaceful = (not npc:best_enemy()) and npc:dont_has_info("npcx_beh_ignore_combat") and true or false
			end
			-- Printer:Trace(LOG.INFO, CAT.NPC,"companion[%s] is_peaceful %s - dist: %s",clist[i], is_peaceful, distance_between(db.actor,npc))
			-- check if is too far away
			squad_is_peaceful = squad_is_peaceful and is_peaceful
			Printer:Trace(LOG.INFO, CAT.NPC,"current calculation for squad is_peaceful %s", squad_is_peaceful)					
		end	
	end	
	if not squad_is_peaceful then
		Printer:Trace(LOG.INFO, CAT.NPC,"squad is under attack or attacking")
	end
	Printer:Trace(LOG.INFO, CAT.NPC,"squad is resolved peaceful %s", squad_is_peaceful)
	if not Squad_Info.combat and not squad_is_peaceful then
		Printer:Debug(LOG.START, CAT.EXEC,"npcd_squad_combat_started")
		Squad_Info.combat = true
		SendScriptCallback("npcd_squad_combat_started")
		return
	end

	if Squad_Info.combat and squad_is_peaceful then
		Printer:Debug(LOG.STOP, CAT.EXEC,"npcd_squad_combat_ended")
		Squad_Info.combat = false
		SendScriptCallback("npcd_squad_combat_ended")
		return
	end
end

------------------------------------------------------------------------------------------------
-- Stalker Cloning Utility, by G_FLAT
-- Spawns an NPC's clone 
-- NPCD's custom version. credits to G_FLAT

-- took create_npc function and stripped it to the bare minimum
local function create_one_npc(squad, sec, pos, lvid, gvid)
	local id = squad:add_squad_member(sec, pos, lvid, gvid)
	local se_obj = id and alife_object(id)
	SIMBOARD:setup_squad_and_group(se_obj)
	
	squad:set_squad_relation()
	squad:refresh()

	return se_obj
end

-- copies npc statistics onto clone
local function copy_statistics(se_npc, se_clone)
	local m_data_npc 	= alife_storage_manager.get_se_obj_state(se_npc)
	local m_data_clone 	= alife_storage_manager.get_se_obj_state(se_clone, true)

	if (m_data_npc and m_data_clone) then
		m_data_clone["killed_stalkers"]	 = m_data_npc["killed_stalkers"] or 0
		m_data_clone["killed_monsters"]	 = m_data_npc["killed_monsters"] or 0
		m_data_clone["artefacts_found"]	 = m_data_npc["artefacts_found"] or 0
		m_data_clone["wounded_helped"]	 = m_data_npc["wounded_helped"]  or 0
		m_data_clone["corpse_looted"]	 = m_data_npc["corpse_looted"]   or 0
	end

end

-- empties clone inventory then copies npc items
local function duplicate_inventory(se_npc, se_clone)
	for id in alife():get_children(se_clone) do
		local se_item = alife_object(id)
		if se_item then
			safe_release_manager.release(se_item)
		end
	end

	for id in alife():get_children(se_npc) do
		local item = level.object_by_id(id)
		if item then
			local sec = item:section()
			local con = item:condition() or 1
			local uss = item:get_remaining_uses() or 1
			local cnt = item:ammo_get_count() or 1
			
			alife_create_item(sec, se_clone, {cond = con, uses = uss, ammo = cnt})
		end
	end
end

-- this is just squad_on_npc_death from axr_task_manager
local function transfer_tasks(squad, se_npc)
	-- unregister ID as task giver or pass id onto squad leader if is_sim task
	local task_info = task_manager.get_task_manager().task_info
	for k,v in pairs(task_info) do
		if (v.task_giver_id and v.task_giver_id == se_npc.id) then
			if (squad:npc_count() > 0 and string.find(k,"simulation_task_")) then
				task_info[k].task_giver_id = squad:commander_id()
			else
				task_info[k].task_giver_id = nil
			end
			return
		end
	end
end

--------------- SQUAD CLONING API

function clone_stalker(npc, stop_inv_duplication, stop_tasks_transfer)
	-- get npc's squad's section name
	local se_npc = alife_object(npc:id())
	local squad_section = alife_object(se_npc.group_id):section_name()
	if not squad_section then return end
	
	-- create empty squad at npc's postition
	local pos = npc:position()
	local lvid = npc:level_vertex_id()
	local gvid = npc:game_vertex_id()
	local clone_squad = alife_create(squad_section, pos, lvid, gvid)

	-- populate squad with clone of same section as npc
	local sec = npc:section()
	local se_clone = create_one_npc(clone_squad, sec, pos, lvid, gvid)
	
	-- copy npc data onto clone (name, visual, rank, etc)
	local data = utils_stpk.get_stalker_data(se_npc)
	utils_stpk.set_stalker_data(data, se_clone)

	-- copy goodwill with player
	local goodwill = npc:goodwill(db.actor)
	se_clone:force_set_goodwill(goodwill, db.actor)

	-- copy sympathy
	local sympathy = npc:sympathy()
	printf("-sympathy %s", sympathy)
	-- se_cloneset_sympathy(sympathy)

	-- copy npc statistics (stalker kills, mutant kills, artifacts found, etc)
	copy_statistics(se_npc, se_clone)

	-- duplicate npc's inventory
	if not stop_inv_duplication then
		duplicate_inventory(se_npc, se_clone)
	end

	-- transfer npc's tasks to clone (commander of clone_squad)
	if not stop_tasks_transfer then
		transfer_tasks(clone_squad, se_npc)
	end

	return se_clone.id
end

function actor_on_first_update()
    printf("$[NPCD][Main] npcd_squad actor_on_first_update")
end

function on_game_start()
    printf("$[NPCD][Main] npcd_squad on_game_start")
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	get_printer()
end