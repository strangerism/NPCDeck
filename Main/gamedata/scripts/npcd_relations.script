local npcdu = npcd_utils

function get_printer()
	if not Printer then
		Printer = npcd_logging.get_printer("npcd_relations")
	end 
	LOG = Printer:GetLogTypes()
	CAT = Printer:GetLogCategories()
end
if AddScriptCallback then
	RegisterScriptCallback("npcd_on_log_update", get_printer)
end

function get_relation_desc(value)
    if value == 2 then
        return game.translate_string("ui_mcm_st_npcd_npcs_enemy")
    end
    if value == 1 then
        return game.translate_string("ui_mcm_st_npcd_npcs_neutral")
    end
    if value == 0 then 
        return game.translate_string("ui_mcm_st_npcd_npcs_friend")
    end
    return ""
end

-- NPC Standings effects

-- Relations

-- game_object.enemy 2
-- game_object.friend 0
-- game_object.neutral 1

-- General Goodwill

-- - Neutral (0-999)
-- - can get tasks
-- - can inspect profile
-- - can pay recruit (squad - chance based - only from veteran or advanced squad)

-- - Friend (1000-1999)
-- - can get tasks
-- - can inspect profile
-- - can recruit (squad - advanced only)

-- - Trusted (2000-3000)
-- - can get tasks
-- - can inspect profile
-- - can recruit (squad - veteran and advanced )
-- - can recruit (individually - chance based - only from veteran and above) 

local function is_attitude_neutral(npc)
	if npc and npc:alive() then
        local attitude = npc:general_goodwill(db.actor)
        if attitude >= 0 and attitude <= 999 then
            return true
        end
    end
    return false
end

local function is_attitude_friendly(npc)
	if npc and npc:alive() then
        local attitude = npc:general_goodwill(db.actor)
        if attitude >= 1000 and attitude <= 1999 then
            return true
        end
    end
    return false
end

local function is_attitude_trusted(npc)
	if npc and npc:alive() then
        local attitude = npc:general_goodwill(db.actor)
        if attitude >= 2000 then
            return true
        end
    end
    return false
end

-- Personal Goodwill

--> competency checks

-- - Neutral (0-499)
-- - can pay recruit (individually - chance based - only from veteran and above)

-- - Respected (500-999)
-- - can pay recruit (individually - only from veteran and above)

--> availability check

-- - Friend (1000-1499)
-- - can recruit (individually - chance based - from any squad)

-- - Trusted (1500-2000)
-- - can recruit (individually - from any squad)

local function is_goodwill_neutral(npc)
	if npc and npc:alive() then
        local goodwill = npc:goodwill(db.actor)
        if goodwill >= 0 and goodwill < 500 then
            return true
        end
    end
    return false
end

local function is_goodwill_respected(npc)
	if npc and npc:alive() then
        local goodwill = npc:goodwill(db.actor)
        if goodwill >= 500 and goodwill <= 999 then
            return true
        end
    end
    return false
end

local function is_goodwill_friendly(npc)
	if npc and npc:alive() then
        local goodwill = npc:goodwill(db.actor)
        if goodwill >= 1000 and goodwill <= 1499 then
            return true
        end
    end
    return false
end

local function is_goodwill_trusted(npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"is_goodwill_trusted")
	Printer:Debug(LOG.INFO, CAT.NPC,"npc %s", npc and npc:id() or "nil")
	if npc and npc:alive() then
        local goodwill = npc:goodwill(db.actor)
		Printer:Debug(LOG.INFO, CAT.NPC,"is_goodwill_trusted npc %s goodwill %s", npc:id(), goodwill)
        if goodwill >= 1500 then
            return true
        end
    end
    return false
end

-- Squad Recruitment preconditions

function is_squad_willing_to_work_for_hire(actor, npc)
	local npc = dialogs.who_is_npc(actor,npc)
	if not npc then return false end
    return is_attitude_neutral(npc)
end

function is_squad_willing_to_join_actor(actor, npc)
	local npc = dialogs.who_is_npc(actor,npc)
	if not npc then return false end
    return is_attitude_friendly(npc) or is_attitude_trusted(npc)
end

-- Individually Recruitment preconditions

function is_npc_willing_to_work_for_hire(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_willing_to_work_for_hire")
	local npc = dialogs.who_is_npc(actor,npc)
	if not npc then return false end
	-- log the outcome of each check below
	Printer:Debug(LOG.INFO, CAT.NPC,"goodwill_neutral %s", tostring(is_goodwill_neutral(npc)))
	Printer:Debug(LOG.INFO, CAT.NPC,"goodwill_respected %s", tostring(is_goodwill_respected(npc)))
	local willing = is_goodwill_neutral(npc) or is_goodwill_respected(npc)
	Printer:Debug(LOG.INFO, CAT.NPC,"is_npc_willing_to_work_for_hire %s", willing)
    return willing
end

function is_npc_willing_to_join_actor(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_willing_to_join_actor")
	local npc = dialogs.who_is_npc(actor,npc)
	if not npc then return false end
	-- log the outcome of each check below
	Printer:Debug(LOG.INFO, CAT.NPC,"attitude_trusted %s", tostring(is_attitude_trusted(npc)))
	Printer:Debug(LOG.INFO, CAT.NPC,"goodwill_friendly %s", tostring(is_goodwill_friendly(npc)))
	Printer:Debug(LOG.INFO, CAT.NPC,"goodwill_trusted %s", tostring(is_goodwill_trusted(npc)))
    return is_attitude_trusted(npc) or is_goodwill_friendly(npc) or is_goodwill_trusted(npc)
end

-- Vanilla relation functions

function is_actor_not_enemy(actor, npc)
	return txr_paid_companions.is_actor_natural(actor, npc) or dialogs_axr_companion.is_actor_friend(actor, npc)
end

--- Personal Goodwill Gains

local function get_goodwill_inc(npc)
	local relation = npc:relation(db.actor)
	if relation == 1 then
		return 200
	elseif relation == 0 then
		return 50
	else
		return 0
	end
end

-- task gains

OG_xr_effects_inc_faction_goodwill_to_actor = xr_effects.inc_faction_goodwill_to_actor
function xr_effects.inc_faction_goodwill_to_actor(actor, npc, p)
	Printer:Log(LOG.ADD, CAT.NPC,"MP inc_faction_goodwill_to_actor")
	if npc then
		Printer:Log(LOG.INFO, CAT.NPC, "inc_faction_goodwill_to_actor npc %s %s", npc:id(), npc:character_name())
	else
		Printer:Log(LOG.ERROR, CAT.NPC, "inc_faction_goodwill_to_actor no npc")
	end
	OG_xr_effects_inc_faction_goodwill_to_actor(actor, npc, p)

	-- personal goodwill is given only if completing the task in person 
	if db.actor:is_talking() then
		local speaker = mob_trade.GetTalkingNpc()
		Printer:Debug(LOG.ADD, CAT.NPC, "changing npc %s goodwill by %s", speaker:id(), get_goodwill_inc(speaker))
		speaker:change_goodwill(get_goodwill_inc(speaker), db.actor)
	end
end

-- kill gains

-- TBD

---

-- NPCD Paid Squad joining rules 

-- Squad rankings

-- Novice
-- Advanced
-- Veteran
-- Alpha
-- Sniper

-- for spawns check squad_descr_default_

-- NPC Rankings 

-- novice
-- trainee
-- experienced
-- professional
-- veteran
-- expert
-- master
-- legend

-- from game_relations.ltx

-- actor must be in the neutral zone with the squad faction attitude to use this api in dialogs
OG_txr_paid_companions_is_squad_competent = txr_paid_companions.is_squad_competent
function txr_paid_companions.is_squad_competent(actor,npc)
	local npc = dialogs.who_is_npc(actor,npc)

	local squad = get_object_squad(npc)
	if not (squad) then
		return false
	end

    local OG = txr_paid_companions
	local section = squad:section_name()
	--printf("-txr_paid_companions | squad on dialog - id: %s - section: %s", squad.id, section)
	
	local rand = 0
	OG.dialog_squad[squad.id] = OG.dialog_squad[squad.id] or {}
	
    local cur_time = game.get_game_time()

    if OG.dialog_squad[squad.id] and OG.dialog_squad[squad.id].task_cooldown and math.floor(game.get_game_time():diffSec(OG.dialog_squad[squad.id].task_cooldown)) > 86400 then
        -- 24H task cooldown passed, reset availability check
        OG.dialog_squad[squad.id].can_work = nil
    end
    OG.dialog_squad[squad.id].task_cooldown = cur_time
	
    if string.find(section,"veteran") then
		rand = 70
		OG.dialog_squad[squad.id].money = OG.dialog_squad[squad.id].money or (math.random(180,240)/100)
	elseif string.find(section,"advanced") then
		rand = 50
		OG.dialog_squad[squad.id].money = OG.dialog_squad[squad.id].money or (math.random(130,160)/100)
	else
		OG.dialog_squad[squad.id].money = OG.dialog_squad[squad.id].money or (math.random(80,120)/100)
	end
	
	
	if (OG.dialog_squad[squad.id].can_work == "true") or ((OG.dialog_squad[squad.id].can_work ~= "false") and (math.random(1,100) <= rand)) then
		OG.dialog_squad[squad.id].can_work = "true"
		return true
	end
	
	OG.dialog_squad[squad.id].can_work = "false"
	return false
end

-- NPC ratings

-- rating = novice, 3499, trainee, 6499, experienced, 8999, professional, 11999, veteran, 14499, expert, 17499, master, 26999, legend

local dialog_npc = {}

-- actor must be in the neutral zone with npc to use this api in dialogs
function is_npc_competent(actor,npc)
	local npc = dialogs.who_is_npc(actor,npc)
	if not npc then return false end
	local npc_id = npc:id()
	local rand = 0
	dialog_npc[npc_id] = dialog_npc[npc_id] or {}

    if dialog_npc[npc_id] and dialog_npc[npc_id].task_cooldown and math.floor(game.get_game_time():diffSec(dialog_npc[npc_id].task_cooldown)) > 86400 then
        -- 24H task cooldown passed, reset availability check
		Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_competent reset cooldown")
        dialog_npc[npc_id].can_work = nil
		dialog_npc[npc_id].task_cooldown = game.get_game_time()
    end

    if npc:rank() > 17499 then -- master and legend
		rand = is_goodwill_respected(npc) and 100 or 80
		dialog_npc[npc_id].money = dialog_npc[npc_id].money or (math.random(180,240)/100)
	elseif npc:rank() > 14499 then -- expert
		rand = is_goodwill_respected(npc) and 100 or 60
		dialog_npc[npc_id].money = dialog_npc[npc_id].money or (math.random(130,160)/100)
	elseif npc:rank() > 11999 then -- veteran
        rand = is_goodwill_respected(npc) and 100 or 40
		dialog_npc[npc_id].money = dialog_npc[npc_id].money or (math.random(80,120)/100)
	end

	if (dialog_npc[npc_id].can_work == "true") or is_goodwill_respected(npc) or ((dialog_npc[npc_id].can_work ~= "false") and (math.random(1,100) <= rand)) then
		dialog_npc[npc_id].can_work = "true"
		return true
	end

	dialog_npc[npc_id].can_work = "false"
	return false
end

function is_npc_not_competent(actor,npc)
    return (not is_npc_competent(actor,npc))
end

-- actor must be in the friend zone with npc to use this api in dialogs
function is_npc_available(actor,npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_available")
	local npc = dialogs.who_is_npc(actor,npc)
	if not npc then return false end
	local npc_id = npc:id()
	local rand = 0
	dialog_npc[npc_id] = dialog_npc[npc_id] or {}

    if dialog_npc[npc_id] and dialog_npc[npc_id].task_cooldown and math.floor(game.get_game_time():diffSec(dialog_npc[npc_id].task_cooldown)) > 10 then
        -- 24H task cooldown passed, reset availability check
		Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_available reset cooldown")
        dialog_npc[npc_id].can_work = nil
		dialog_npc[npc_id].task_cooldown = game.get_game_time()
    end
    
    if npc:rank() > 17499 then -- master and legend
		rand = is_goodwill_trusted(npc) and 100 or 80
	elseif npc:rank() > 14499 then -- expert
		rand = is_goodwill_trusted(npc) and 100 or 70
	elseif npc:rank() > 11999 then -- veteran
        rand = is_goodwill_trusted(npc) and 100 or 60
	else -- below
		Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_available below veteran is trusted %s", is_goodwill_trusted(npc))
		rand = is_goodwill_trusted(npc) and 100 or 40
	end
	Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_available rand %s", rand)
	if (dialog_npc[npc_id].can_work == "true") or is_goodwill_respected(npc) or ((dialog_npc[npc_id].can_work ~= "false") and (math.random(1,100) <= rand)) then
		dialog_npc[npc_id].can_work = "true"
		Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_available true")
		return true
	end

	dialog_npc[npc_id].can_work = "false"
	Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_available false")
	return false
end

function is_npc_not_available(actor,npc)
	return (not is_npc_available(actor,npc))
end

function is_npc_recruitable(npc_id)
	local npc = npcdu.get_npc_obj(npc_id)
	if not npc then return false end
	local friendly_companion = xr_conditions.is_squad_commander(db.actor, npc) and dialogs_axr_companion.is_non_story(db.actor, npc) and dialogs_axr_companion.is_actor_friend(db.actor, npc) and dialogs_axr_companion.is_room_in_actor_squad(db.actor, npc) and dialogs_axr_companion.is_not_hostage_task_giver(db.actor, npc) and tasks_guide.not_prec_1(db.actor, npc)
	-- Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_recruitable friendly_companion %s", tostring(friendly_companion))
	local friendly_companion_individually = dialogs_axr_companion.is_non_story(db.actor, npc) and dialogs_axr_companion.is_actor_friend(db.actor, npc) and dialogs_axr_companion.is_not_hostage_task_giver(db.actor, npc) and tasks_guide.not_prec_1(db.actor, npc) and is_npc_willing_to_join_actor(db.actor, npc) and is_npc_available(db.actor, npc)
	-- Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_recruitable friendly_companion_individually %s", tostring(friendly_companion_individually))
	local paid_companion_individually = dialogs_axr_companion.is_non_story(db.actor, npc) and txr_paid_companions.is_actor_natural(db.actor, npc) and txr_paid_companions.is_paid_companion_faction(db.actor, npc) and txr_paid_companions.is_not_dangerous_map(db.actor, npc) and dialogs_axr_companion.is_not_hostage_task_giver(db.actor, npc) and tasks_guide.not_prec_1(db.actor, npc) and is_npc_willing_to_work_for_hire(db.actor, npc) and is_npc_competent(db.actor, npc)
	-- Printer:Debug(LOG.RUN, CAT.NPC,"is_npc_recruitable paid_companion_individually %s", tostring(paid_companion_individually))
	return friendly_companion_individually or paid_companion_individually or (friendly_companion and game.translate_string("st_npcd_npc_dialogs_squad_only", true)) or false
end

function is_squad_recruitable(actor,npc)
	local npc = dialogs.who_is_npc(actor,npc)
	if not npc then return false end
	local squad = get_object_squad(npc)
	if not squad then return false end

	local joinable = false
	local section = squad:section_name()
	if string.find(section,"veteran") and string.find(section,"advanced") then
		joinable = true
	else
		joinable = false
	end	
	return joinable
end

function is_squad_joinable(actor,npc)
	return dialogs_axr_companion.is_actor_friend(actor, npc)
end

local function save_state(m_data)
	m_data.npcd_dialog_npc = dialog_npc
end

local function load_state(m_data) 
	dialog_npc = m_data.npcd_dialog_npc or dialog_npc
	m_data.npcd_dialog_npc = nil
end

function on_game_start()
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end