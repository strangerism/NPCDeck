local npcdu = npcd_utils
local NPCD = npcd
local FEAT_MODE = NPCD.FEAT_MODE
local FEAT_SETTING = NPCD.FEAT_SETTING

function set_printer(main_printer)
	printf("-[NPCD][Main] MCM set_printer")
	Printer = main_printer
	LOG = Printer:GetLogTypes()
	CAT = Printer:GetLogCategories()
end

function on_mcm_load()

		op = { id= "main", sh=true, text="ui_mcm_npcd_main", gr ={
				{ id = "title",type= "slide",link= "ui_options_slider_player",text="ui_mcm_npcd_main_title",size= {512,50},spacing= 20 },
				{ id = "desc", type = "desc", clr = {200, 200, 255, 200}, text = "ui_mcm_npcd_main_desc" },
				{ id = "enable", type = "check", val = 1, def=true},
				},
			}
	return op, "npcd"
end

function get_setting(module_name, var_name)
	if Printer then
		Printer:Debug(LOG.INFO, CAT.CONF, "npcd_get_setting %s %s", module_name, var_name)
	else
		printf("//[NPCD][MCM] npcd_get_setting %s %s", module_name, var_name)
	end
	-- Get MCM setting
	if ui_mcm then 
		return ui_mcm.get("npcd/" .. module_name .. "/" .. var_name)
	end
	
end

function set_setting(module_name, var_name, value)
	if Printer then
		Printer:Debug(LOG.INFO, CAT.CONF, "npcd_set_setting %s %s", module_name, var_name)		
	else
		printf("-[NPCD][MCM] npcd_set_setting %s %s", module_name, var_name)
	end
	-- Set MCM setting
	if ui_mcm then 
		ui_mcm.set("npcd/" .. module_name .. "/" .. var_name, value)
	end

end

function get_module_setting(module_name, var_name)

	-- Get MCM setting
	if ui_mcm then 
		return ui_mcm.get("npcd_module/" .. module_name .. "/" .. var_name)
	end
	
end

function set_module_setting(module_name, var_name, value)

	-- Set MCM setting
	if ui_mcm then 
		ui_mcm.set("npcd_module/" .. module_name .. "/" .. var_name, value)
	end

end

function npcd_module_installed(script)
	if script then
		return script.module_installed or nil
	else
		return false
	end
end

local function mcm_print(msg, ...)
	if Printer then
		Printer:Debug(LOG.INFO, CAT.CONF, msg, ...)
	else
		printf(msg, ...)
	end
end

function get_module_menu(module_deck)

	-- Printer:LogTable("MCM Module Deck", module_deck)
	local module_options = {}

	-- build main menu
    local main_options = {
        { id = "title", type = "slide", link = "ui_options_slider_player", text = module_deck.mcm_menu_title, size = {512,50}, spacing = 20 },
        { id = "desc", type = "desc", clr = {200, 200, 255, 200}, text = module_deck.mcm_menu_desc }
    }
	table.insert(main_options, { id = "divider", type = "line" })
	-- add module custom main setting
	for i = 1, #module_deck.mcm_menu do
		table.insert(main_options, module_deck.mcm_menu[i] )
	end
	-- add module default main setting
	table.insert(main_options, { id = "divider", type = "line" })
	table.insert(main_options, { id = "enable", hint = "npcd_module_enable", val = 1, type = "check", def = true })
	table.insert(main_options, { id = "logs", hint = "npcd_module_logs", val = 1, type = "check", def = false })
	table.insert(main_options, { id = "uninstall", hint = "npcd_module_uninstall", val = 1, type = "check", def = false })

	-- add main menu to module menu
	local main_menu = { id="main", text="ui_mcm_npcd_module_menu_main", sh=true, gr=main_options}
	table.insert(module_options, main_menu)

	-- build perks menus
	mcm_print(msg, "building %s perk menus", npcdu.tablelength(module_deck.perks))
	for _, perk in pairs(module_deck.perks) do
		mcm_print("perk menu %s", perk.id)
		local perk_menu = {id = perk.id, text=perk.mcm_menu_name, sh=true, gr={}}
		-- build  perk menu
		table.insert(perk_menu.gr, { id = perk.id .. "_name", type = "slide", link = "ui_options_slider_player", text = perk.name, size = {512,50}, spacing = 20 })
		table.insert(perk_menu.gr, { id = perk.id .. "_desc", type = "desc", clr = {200, 200, 255, 200}, text = perk.description} )
		local list = {}
		table.insert(list, {perk.type, perk.type})
		table.insert(perk_menu.gr, { id = perk.id .. "_type" , hint = "st_npcd_perk_type", type= "list", val = 0, def=perk.type, content= list, })
		-- add settings
		if perk.mcm_menu then
			for _, setting in pairs(perk.mcm_menu) do
				table.insert(perk_menu.gr, setting)
			end
		end
		-- add feats
		if perk.feats then
			table.insert(perk_menu.gr, { id = "divider", type = "line" })
			table.insert(perk_menu.gr, { id = perk.id .. "_feats", type = "title", align="l", clr = {200, 180, 4, 219}, text = "ui_mcm_st_npcd_feats"})
			for _, feat in pairs(perk.feats) do
				-- add feat section
				table.insert(perk_menu.gr, { id = feat.id .. "_name", type = "slide", link = "ui_options_slider_gameplay_diff", text = feat.name, size = {512,50}, spacing = 5, borderless=true, })
				table.insert(perk_menu.gr, { id = feat.id .. "_desc", type = "desc", clr = {200, 200, 255, 200}, text = feat.description} )
				-- type and mode
				local list = {}
				table.insert(list, {feat.type, feat.type})
				table.insert(perk_menu.gr, { id = feat.id .. "_type" , hint = "st_npcd_feat_type", type= "list", val = 0, def=feat.type, content= list, })
				list = {}
				table.insert(list, {feat.mode, feat.mode})
				table.insert(perk_menu.gr, { id = feat.id .. "_mode" , hint = "st_npcd_feat_mode", type= "list", val = 0, def=feat.mode, content= list, })
				-- stats

				-- keybinds
				if feat.mode == FEAT_MODE.MANUAL and feat.activation_key then
					local dik = { id = feat.id .. "_" .. FEAT_SETTING.ACTIVATION_KEY .. "_" .. FEAT_SETTING.KEYBIND.DIK, type = "key_bind", val = 2, hint = "st_npcd_feat_keybind",
						def = feat.activation_key.dik
					}
					local mode = { id = feat.id .. "_" .. FEAT_SETTING.ACTIVATION_KEY .. "_" .. FEAT_SETTING.KEYBIND.MODE, type = ui_mcm.kb_mod_radio , val = 2, hint = "mcm_kb_mode",
						def = feat.activation_key.mode,
						content = {
							{0, "mcm_kb_mode_press"},
							{1, "mcm_kb_mode_dtap"},
							{2, "mcm_kb_mode_hold"} 
						}
					}
					local modkey = { id = feat.id .. "_" .. FEAT_SETTING.ACTIVATION_KEY .. "_" .. FEAT_SETTING.KEYBIND.MODKEY , type = ui_mcm.kb_mod_radio , val = 2, hint = "mcm_kb_modifier",
						def = feat.activation_key.mod_key,
						content = { 
							{0,"mcm_kb_mod_none"} , 
							{1,"mcm_kb_mod_shift"} , 
							{2,"mcm_kb_mod_ctrl"},
							{3,"mcm_kb_mod_alt"}
						}
					}
					table.insert(perk_menu.gr, dik)
					table.insert(perk_menu.gr, mode)
					table.insert(perk_menu.gr, modkey)
				end
			end
		end
		-- adding perk menu to module options
		table.insert(module_options, perk_menu)
	end

	return module_options
end