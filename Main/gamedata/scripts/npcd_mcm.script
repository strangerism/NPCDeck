local npcdu = npcd_utils

local NPCD = npcd
local FEAT_MODE = NPCD.FEAT_MODE
local FEAT_SETTING = NPCD.FEAT_SETTING
local KEYBIND = NPCD.KEYBIND

function get_printer()
	if not Printer then
		Printer = npcd_logging.get_printer("npcd_mcm")
	end 
	LOG = Printer:GetLogTypes()
	CAT = Printer:GetLogCategories()
end
if AddScriptCallback then
	RegisterScriptCallback("npcd_on_log_update", get_printer)
end

function on_mcm_load()

		op = { id= "main", sh=true, text="ui_mcm_menu_npcd_main", gr ={
				{ id = "title",type= "slide",link= "ui_options_slider_player",text="ui_mcm_npcd_main_title",size= {512,50},spacing= 20 },
				{ id = "desc", type = "desc", clr = {200, 200, 255, 200}, text = "ui_mcm_npcd_main_desc" },
				{ id = "enable", type = "check", val = 1, def=true},
				},
			}
	return op, "npcd"
end

-- function on_mcm_load()

-- 		op = { id= "npcd",gr={
-- 				{ id= "main", sh=true, text="ui_mcm_menu_npcd_main", gr ={
-- 					{ id = "title",type= "slide",link= "ui_options_slider_player",text="ui_mcm_npcd_main_title",size= {512,50},spacing= 20 },
-- 					{ id = "desc", type = "desc", clr = {200, 200, 255, 200}, text = "ui_mcm_npcd_main_desc" },
-- 					{ id = "enable", type = "check", val = 1, def=true},},
-- 				},
-- 				-- { id = "npcs", sh=true, text = "ui_mcm_menu_npcd_npcs", gr = get_npcs_menu() },
-- 				{ id = "actionbar", text = "ui_mcm_menu_npcd_actionbar", gr = get_actionbar_menu() },
-- 			}
-- 		}
				
-- 	return op
-- end

function get_setting(module_name, var_name)
	if Printer then
		Printer:Debug(LOG.INFO, CAT.CONF, "npcd_get_setting %s %s", module_name, var_name)
	else
		printf("[NPCD][MCM] npcd_get_setting %s %s", module_name, var_name)
	end
	-- Get MCM setting
	if ui_mcm then 
		return ui_mcm.get("npcd/" .. module_name .. "/" .. var_name)
	end
	
end

function set_setting(module_name, var_name, value)
	if Printer then
		Printer:Debug(LOG.INFO, CAT.CONF, "npcd_set_setting %s %s", module_name, var_name)		
	else
		printf("[NPCD][MCM] npcd_set_setting %s %s", module_name, var_name)
	end
	-- Set MCM setting
	if ui_mcm then 
		ui_mcm.set("npcd/" .. module_name .. "/" .. var_name, value)
	end

end

function get_module_setting(module_name, var_name)

	-- Get MCM setting
	if ui_mcm then 
		return ui_mcm.get("npcd_module/" .. module_name .. "/" .. var_name)
	end
	
end

function set_module_setting(module_name, var_name, value)

	-- Set MCM setting
	if ui_mcm then 
		ui_mcm.set("npcd_module/" .. module_name .. "/" .. var_name, value)
	end

end

function get_module_main_setting(module, var_name)
	return npcd_mcm.get_module_setting(module, "main/" .. var_name)
end
function get_module_perk_setting(module, perk_id, var_name)
	return npcd_mcm.get_module_setting(module, perk_id .. "/" .. var_name)
end

function get_module_perk_feat_setting_id(module_name, perk_id, feat_id, setting, var_name, rank)
	if setting == FEAT_SETTING.ACTIVATION_KEY then
		return "npcd_module/" .. module_name .. "/" .. perk_id .. "/" .. feat_id .. "_" .. setting .. "_" .. (var_name or "")
	end	
end

function get_module_perk_feat_setting(module, perk_id, feat_id, setting, var_name, rank)

	if setting == FEAT_SETTING.ACTIVATION_KEY then
		return npcd_mcm.get_module_setting(module, perk_id .. "/" .. feat_id .. "_" .. setting .. "_" .. var_name)
	end
	if setting == FEAT_SETTING.STATS and rank then
		return npcd_mcm.get_module_setting(module, perk_id .. "/" .. feat_id .. "_" .. setting .. "_" .. rank .. "_" .. var_name)
	end
	
end

function npcd_module_installed(script)
	if script then
		return script.module_installed or nil
	else
		return false
	end
end

local function mcm_print(msg, ...)
	if Printer then
		Printer:Debug(LOG.INFO, CAT.CONF, msg, ...)
	else
		printf(msg, ...)
	end
end

function add_readonly_field(menu, field, id, hint, no_str)
	local list = {}
	table.insert(list, {field, field})
	table.insert(menu, { id = id , hint = hint, type= "list", val = 0, def=field, content= list, no_str = no_str or false,})
end

function add_keybind(menu, keybind_grp)

	local key_bind = { id = keybind_grp.key_bind.id, type = "key_bind", val = 2, hint = keybind_grp.key_bind.hint,
		def = keybind_grp.key_bind.default
	}
	local mode = { id = keybind_grp.mode.id, type = ui_mcm.kb_mod_radio , val = 2, hint = keybind_grp.mode.hint or "mcm_kb_mode",
		def = keybind_grp.mode.default,
		content = {
			{0, "mcm_kb_mode_press"},
			{1, "mcm_kb_mode_dtap"},
			{2, "mcm_kb_mode_hold"} 
		}
	}
	local modifier = { id = keybind_grp.modifier.id, type = ui_mcm.kb_mod_radio , val = 2, hint = keybind_grp.modifier.hint or "mcm_kb_modifier",
		def = keybind_grp.modifier.default,
		content = { 
			{0,"mcm_kb_mod_none"} , 
			{1,"mcm_kb_mod_shift"} , 
			{2,"mcm_kb_mod_ctrl"},
			{3,"mcm_kb_mod_alt"}
		}
	}
	table.insert(menu, key_bind)
	table.insert(menu, mode)
	table.insert(menu, modifier)
end


function get_npcs_menu()
	return {}
end

function get_module_menu(module_deck)

	-- Printer:LogTable("MCM Module Deck", module_deck)
	local module_options = {}

	-- build main menu
    local main_options = {
        { id = "title", type = "slide", link = "ui_options_slider_player", text = module_deck.mcm_menu_title, size = {512,50}, spacing = 20 },
        { id = "desc", type = "desc", clr = {200, 200, 255, 200}, text = module_deck.mcm_menu_desc }
    }
	table.insert(main_options, { id = "divider", type = "line" })
	-- add module custom main setting
	for i = 1, #module_deck.mcm_menu do
		table.insert(main_options, module_deck.mcm_menu[i] )
	end
	-- add module default main setting
	table.insert(main_options, { id = "divider", type = "line" })
	table.insert(main_options, { id = "enable", hint = "npcd_module_enable", val = 1, type = "check", def = true })
	table.insert(main_options, { id = "logs", hint = "npcd_module_logs", val = 1, type = "check", def = false })
	table.insert(main_options, { id = "uninstall", hint = "npcd_module_uninstall", val = 1, type = "check", def = false })

	-- add main menu to module menu
	local main_menu = { id="main", text="ui_mcm_npcd_module_menu_main", sh=true, gr=main_options}
	table.insert(module_options, main_menu)

	-- build perks menus
	mcm_print(msg, "building %s perk menus", npcdu.tablelength(module_deck.perks))
	for _, perk in pairs(module_deck.perks) do
		mcm_print("perk menu %s", perk.id)
		local perk_menu = {id = perk.id, text=perk.mcm_menu_name, sh=true, gr={}}
		-- build  perk menu
		table.insert(perk_menu.gr, { id = perk.id .. "_name", type = "slide", link = "ui_options_slider_player", text = perk.name, size = {512,50}, spacing = 20 })
		table.insert(perk_menu.gr, { id = perk.id .. "_desc", type = "desc", clr = {200, 200, 255, 200}, text = perk.description} )
		add_readonly_field(perk_menu.gr, perk.type, perk.id .. "_type", "st_npcd_perk_type")
		-- add settings
		if perk.mcm_menu then
			for _, setting in pairs(perk.mcm_menu) do
				table.insert(perk_menu.gr, setting)
			end
		end
		-- add feats
		if perk.feats then
			table.insert(perk_menu.gr, { id = "divider", type = "line" })
			table.insert(perk_menu.gr, { id = perk.id .. "_feats", type = "title", align="l", clr = {200, 180, 4, 219}, text = "ui_mcm_st_npcd_feats"})
			for _, feat in pairs(perk.feats) do
				-- add feat section
				table.insert(perk_menu.gr, { id = feat.id .. "_name", type = "slide", link = "ui_options_slider_gameplay_diff", text = feat.name, size = {512,50}, spacing = 5, borderless=true, })
				table.insert(perk_menu.gr, { id = feat.id .. "_desc", type = "desc", clr = {200, 200, 255, 200}, text = feat.description} )
				-- type and mode
				add_readonly_field(perk_menu.gr, feat.type, feat.id .. "_type", "st_npcd_feat_type")
				add_readonly_field(perk_menu.gr, feat.mode, feat.id .. "_mode", "st_npcd_feat_mode")
				-- stats
				-- keybinds
				if feat.mode == FEAT_MODE.MANUAL and feat.activation_key then
					local keybind_grp = {
						key_bind = {
							id = feat.id .. "_" .. FEAT_SETTING.ACTIVATION_KEY .. "_" .. FEAT_SETTING.KEYBIND.KEY,
							hint = "st_npcd_feat_keybind",
							default = feat.activation_key.keybind,
						},
						mode = {
							id = feat.id .. "_" .. FEAT_SETTING.ACTIVATION_KEY .. "_" .. FEAT_SETTING.KEYBIND.MODIFIER,
							default = feat.activation_key.modifier,
						},
						modifier = {
							id = feat.id .. "_" .. FEAT_SETTING.ACTIVATION_KEY .. "_" .. FEAT_SETTING.KEYBIND.SECOND_KEY,
							default = feat.activation_key.second_key,
						}
					}
					add_keybind(perk_menu.gr, keybind_grp)
				end
				if feat.stats and npcdu.tablelength(feat.stats) > 0 then
					table.insert(perk_menu.gr, { id = feat.id .. "_stats", type = "title", align="l", clr = {200, 180, 4, 219}, text = "ui_mcm_st_npcd_feats_stats"})
					for i = 1, #feat.stats do
						local rank = feat.stats[i]
						table.insert(perk_menu.gr, { id = feat.id .. "_stats_desc", type = "desc", clr = {200, 200, 255, 200}, text = string.format(game.translate_string("ui_mcm_st_npcd_feats_stats_rank"), i)} )
						for key, value in pairs(rank) do
							local stat_hint
							local mcm_prefix
							if key == FEAT_SETTING.STAT.COOLDOWN then
								-- stat_hint = "st_npcd_feats_stats_cooldown"
								stat_hint = "st_npcd_feats_stats_cooldown"
							elseif key == FEAT_SETTING.STAT.LIFE then
								-- stat_hint = "st_npcd_feats_stats_life"
								stat_hint = "st_npcd_feats_stats_life"
							else
								-- mcm_prefix = "npcd_module_" .. module_deck.module .. "_" .. perk.id .. "_" .. feat.id .. "_"
								stat_hint = "npcd_module_" .. module_deck.module .. "_" .. perk.id .. "_" .. feat.id .. "_" .. key
							end
							table.insert(perk_menu.gr, {id = feat.id .. "_stats_" .. i .. "_" .. key , type = "input", hint = stat_hint, val = 2, def = value, min = 1, max = 9999})
						end
					end
				end
			end
		end
		-- adding perk menu to module options
		table.insert(module_options, perk_menu)
	end
	-- npcdu.printlog_table("MCM Module Deck", module_options)
	return module_options
end