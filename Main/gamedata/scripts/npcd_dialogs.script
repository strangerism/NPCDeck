local npcdu = npcd_utils

MAX_SLOTS = 16
function get_printer()
	if not Printer then
		Printer = npcd_logging.get_printer("npcd_dialogs")
	end 
	LOG = Printer:GetLogTypes()
	CAT = Printer:GetLogCategories()
end
-- if AddScriptCallback then
	RegisterScriptCallback("npcd_on_log_update", get_printer)
-- end

--- NPCD Dialog APIs

-- Dialogs NPCD Preconditions

function npcd_started()
	return npcd_manager.NPCD_BOOTED
end

function npc_has_profile(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.get_npc(npc:id())
	end
	return false
end

function npc_hasnot_profile(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.get_npc(npc:id())
	end
	return false
end

function npc_has_perks(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.has_perks(npc:id())
	end
	return false
end

function npc_hasnot_perks(actor, npc)
	return not npc_has_perks(actor, npc)
end

function npc_is_insquad(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd_squad.is_actor_squad(npc:id())
	end
	return false
end

function npc_isnot_insquad(actor, npc)
	return not npc_is_insquad(actor, npc)
end

function is_favorite(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		local favorite = npcd.get_favorite(npc:id())
		Printer:Debug(LOG.INFO, CAT.NPC,"is npc %s favorite %s", npc:id(), favorite)
		return favorite
	end
end

function is_unfavorite(actor, npc)
	return not is_favorite(actor, npc)
end

-- Dialogs NPCD Actions

function set_favorite(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		Printer:Debug(LOG.INFO, CAT.NPC,"set npc %s favorite", npc:id())
		npcd.set_favorite(npc:id(), true)
	end
end

function set_unfavorite(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		Printer:Debug(LOG.INFO, CAT.NPC,"set npc %s unfavorite", npc:id())
		npcd.set_favorite(npc:id(), false)
	end
end

function dialog_update_npc_info(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"updating npc info")
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		npcd.set_show_profile(npc:id(), true)
	end
end

-- Init dialogs

OG_fill_priority_hello_table = dialog_manager.fill_priority_hello_table
function dialog_manager.fill_priority_hello_table(actor, npc, dialog_name, phrase_id)
	local npc_info = npcd.get_npc_info(npc:id())
	if npc_info then
		npc_info.can_recruit = npcd_relations.can_recruit(npc:id())
		npc_info.last_time_seen = game.get_game_time()
		npc_info.last_place_seen = dynamic_news_helper.GetPointDescription(db.actor)
		npcd.set_npc_info(npc:id(), npc_info)
	end
	OG_fill_priority_hello_table(actor, npc, dialog_name, phrase_id)
end

-- Dialogs phrases getters

function get_dialog_ask_is_skilled()
	return game.translate_string("st_npcd_npc_dialogs_ask_is_skilled", true)
end

function get_dialog_skill_answer(actor, npc)
	-- printf("get_dialog_skill_answer actor %s npc %s", actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		if npcd.has_perks(npc:id()) then
			local profile_dialog = game.translate_string("st_npcd_npc_dialogs_skill_answer_yes1", true) .. "\\n \\n"
			profile_dialog = profile_dialog .. string.format(game.translate_string("st_npcd_npc_dialogs_standings"), npc:general_goodwill(db.actor), npcd_relations.get_relation_desc(npc:relation(db.actor)), npc:goodwill(db.actor))
			return profile_dialog
		else
			return game.translate_string("st_npcd_npc_dialogs_skill_answer_no", true)
		end
	else
		return game.translate_string("st_npcd_npc_dialogs_skill_answer_no", true)
	end
end

function get_dialog_get_squad_info(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"get_dialog_get_squad_info")
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		local squad = get_object_squad(npc)
		if squad then
			local section = squad:section_name()
			Printer:Debug(LOG.INFO, CAT.NPC,"squad %s", section)
			local rank = string.match(section, "[^_]+$")
			local size = utils_obj.get_squad_count(npc)
			Printer:Debug(LOG.INFO, CAT.NPC,"rank %s", rank)
			Printer:Debug(LOG.INFO, CAT.NPC,"size %s", size)
			local squad_info_dialog = string.format(game.translate_string("st_npcd_npc_dialogs_squad_info"),size, rank, npcd_relations.is_squad_recruitable(actor,npc), npcd_relations.is_squad_hireable(actor,npc))
			if not dialogs_axr_companion.is_room_in_actor_squad(actor,npc) then
				squad_info_dialog = squad_info_dialog .. game.translate_string("st_npcd_npc_dialogs_squad_no_room", true)
			end
			squad_info_dialog = squad_info_dialog .. "\\n \\n" .. ( npcd_relations.is_squad_hireable(actor,npc) and game.translate_string("st_npcd_npc_dialogs_squad_hireable", true) or game.translate_string("st_npcd_npc_dialogs_squad_recruitable", true) )
						
			return squad_info_dialog
		end
		
	end
end

function get_background()
	local id = math.random(2)
	return game.translate_string("st_npcd_npc_dialogs_ask_background" .. id, true)
end

function get_salute()
	return game.translate_string("st_npcd_npc_dialogs_salute", true)
end

function get_favorite()
	return game.translate_string("st_npcd_npc_dialogs_favorite", true)
end

function get_unfavorite()
	return game.translate_string("st_npcd_npc_dialogs_unfavorite", true)
end

function get_squad_salute()
	return game.translate_string("st_npcd_npc_dialogs_squad_salute", true)
end

function get_squad_favorite()
	return game.translate_string("st_npcd_npc_dialogs_squad_favorite", true)
end

function get_squad_unfavorite()
	return game.translate_string("st_npcd_npc_dialogs_squad_unfavorite", true)
end

function get_salute_noperks()
	return game.translate_string("st_npcd_npc_dialogs_salute_noperks", true)
end

function get_npc_profile(actor, npc)
	return dialog_get_npc_profile(actor, npc)
end

local function update_discovered(perk)
	if npcd.set_discovered(perk.id) then
		local npcd_notification = "ui_mcm_npcd_notification_perk_discovery"
		if perk.discovery_desc then
			npcd_notification = perk.discovery_desc
		end
		npcdu.print_tip(npcd_notification, 10000, perk.name and game.translate_string(perk.name))
	end
end

function dialog_get_npc_profile(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"getting npc profile")
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		local npc_id = npc:id()
		Printer:Log(LOG.INFO, CAT.CONF,"npc %s get profile", npc_id)
		local id = math.random(5)
		local profile_dialog = game.translate_string("st_npcd_npc_dialogs_background_response" .. id, true) .. "\\n \\n" 
		local npc_perks = npcd.get_npc_perks(npc_id)
		if npc_perks then
			for _, npc_perk in pairs(npc_perks) do
				local perk = npcd.get_perk(npc_perk.id, npc_id)
				local st_perk_name = game.translate_string(perk.name, true) or ""
				local st_perk_module = game.translate_string("ui_mcm_npcd_module_menu_" .. perk.module, true) or perk.module or ""
				profile_dialog = profile_dialog .. string.format(game.translate_string("st_npcd_npc_dialogs_perk_desc"), st_perk_name, st_perk_module)
				if perk.dialog then
					profile_dialog = profile_dialog .. "\\n \\n" .. game.translate_string(perk.dialog, true)
				end
				profile_dialog = profile_dialog .. "\\n \\n"

				-- check if perk is discovered and send notification if so
				update_discovered(perk)
			end
			return profile_dialog
		end
	end
	return game.translate_string("st_npcd_npc_dialogs_npc_has_no_perks", true)
end

--- NPC Dialog Joining Actions API
--- 

-- Taken from Individually Recruitable Companions, written by G_FLAT credits to G_FLAT

-- Allows the player to recruit and hire stalkers as companions, one at a time, 
-- regardless of the size of the squad or if the stalker is the commander of the squad he belongs to.

-- Works by separating the stalker from his squad, by creating a clone and deleting the original.
-- The resulting clone is automatically added to the player's "companion squad"
-- In case of dismissal, the stalker can be re-recruited through the "vanilla" game dialogs. 

-- Custom Companion Squad Size by Catspaw compatibility
local custom_actor_squadsize 			= 2
local custom_actor_squadsize_folkhero 	= 4
local hascustomsquadsize				= false

function become_actor_companion_individually(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"become_actor_companion_individually")
	local npc = dialogs.who_is_npc(actor, npc)
	local clone_id = npcd_squad.clone_stalker(npc)
	
	if clone_id then
		local npc_id = npc:id()
		local npc_goodwill = npc:goodwill(db.actor)

		local se_obj = alife_object(npc_id)
		safe_release_manager.release(se_obj)
		
		CreateTimeEvent("clone_become_companion_event", "clone_become_companion_" .. clone_id, 0, function(npc_id, clone_id, npc_goodwill)
			printf("clone_become_companion_" .. clone_id)
			local clone = level.object_by_id(clone_id)
			if clone then
				-- set clone goodwill to what the original npc had
				-- somehow the goodwill is not reseted properly on clone, so we force it again here
				clone:set_goodwill(npc_goodwill, db.actor)

				npcd_manager.npcd_recruit(npc_id, clone_id)
				dialogs_axr_companion.become_actor_companion(db.actor, clone)
				db.actor:run_talk_dialog(clone)
				return true
			else
				return false
			end
		end, npc_id, clone_id, npc_goodwill)
	else
		actor:run_talk_dialog(npc)
	end

end

function become_paid_actor_companion_individually_and_register(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"become_paid_actor_companion_individually_and_register")
	local npc = dialogs.who_is_npc(actor, npc)
	local clone_id = npcd_squad.clone_stalker(npc)
	
	if clone_id then
		local npc_goodwill = npc:goodwill(db.actor)
		local se_obj = alife_object(npc:id())
		safe_release_manager.release(se_obj)
	
		CreateTimeEvent("clone_become_paid_companion_event", "clone_become_paid_companion_" .. clone_id, 0, function(id, npc_goodwill)
			local clone = level.object_by_id(id)
			if clone then
				-- set clone goodwill to what the original npc had
				-- somehow the goodwill is not reseted properly on clone, so we force it again here
				clone:set_goodwill(npc_goodwill, db.actor)

				npcd_manager.npcd_recruit(npc_id, clone_id)
				dialogs_axr_companion.become_actor_companion(db.actor, clone)
				txr_paid_companions.register_paid_companion(db.actor, clone)
				db.actor:run_talk_dialog(clone)
				return true
			else
				return false
			end
		end, clone_id, npc_goodwill)
	else
		actor:run_talk_dialog(npc)
	end

end

-- precondition: must have at least one free spot 
function is_room_for_one_in_actor_squad(actor, npc)
	local max_size = 0

	-- Custom Companion Squad Size by Catspaw compatibility
	if hascustomsquadsize then
		if game_achievements.has_achievement("patriarch") then
			max_size = custom_actor_squadsize_folkhero
		else
			max_size = custom_actor_squadsize
		end
	else
		max_size = axr_companions.max_actor_squad_size + (game_achievements.has_achievement("patriarch") and 2 or 0)
	end

	if axr_companions.get_companion_count() + 1 <= max_size then
		return true
	end
	return false
end

-- precondition: don't show the new dialog for stalkers that are alone in a squad
function not_a_one_man_squad(actor, npc)
	if utils_obj.get_squad_count(npc) > 1 then
		return true
	end
	return false
end

-- precondition: is_actor_stronger
-- this makes it fine for grok's script to not be available, for non-gamma installs
function get_is_actor_stronger_if_script_is_available(actor, npc)
	if grok_get_companions then
		return grok_get_companions.is_actor_stronger(actor, npc)
	end
	return true
end

-- Hey friend, wanna leave your squad and come with me instead?
function get_friend_companion_ask_join_individually_text()
	return game.translate_string("st_friend_companion_ask_join_individually", true)
end

-- I can pay you to leave your squad and work as my escort, interested?
function get_paid_companion_dialog_text_individually_text()
	return game.translate_string("st_paid_companion_dialog_text_individually", true)
end

function actor_on_first_update()
    printf("$[NPCD][Main] npcd_dialogs actor_on_first_update")
end

function on_game_start()
	-- Custom Companion Squad Size by Catspaw compatibility
    printf("$[NPCD][Main] npcd_dialogs on_game_start")
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)	
    RegisterScriptCallback("npcd_started", update_settings)
	RegisterScriptCallback("on_option_change", update_settings)
	get_printer()
end

function update_settings()
	-- Custom Companion Squad Size by Catspaw compatibility
	if ui_mcm and custom_companion_squad_size then 
		custom_actor_squadsize 				= ui_mcm.get("customsquadsize/maxsquadsize")
		custom_actor_squadsize_folkhero 	= ui_mcm.get("customsquadsize/maxsquadsize_folkhero")
		hascustomsquadsize 					= true
	end
end