local npcdu = npcd_utils

MAX_SLOTS = 16
function get_printer()
	if not Printer then
		Printer = npcd_logging.get_printer("npcd_dialogs")
	end 
	LOG = Printer:GetLogTypes()
	CAT = Printer:GetLogCategories()
end
if AddScriptCallback then
	RegisterScriptCallback("npcd_on_log_update", get_printer)
end

--- NPCD Perks Dialog API

function npcd_started()
	return npcd_manager.NPCD_BOOTED
end

function npc_has_profile(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.get_npc(npc:id())
	end
	return false
end

function npc_hasnot_profile(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.get_npc(npc:id())
	end
	return false
end

function npc_has_perks(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.has_perks(npc:id())
	end
	return false
end

function npc_hasnot_perks(actor, npc)
	return not npc_has_perks(actor, npc)
end

function npc_is_insquad(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd_squad.is_actor_squad(npc:id())
	end
	return false
end

function npc_isnot_insquad(actor, npc)
	return not npc_is_insquad(actor, npc)
end

function is_actor_not_enemy(actor, npc)
	return txr_paid_companions.is_actor_natural(actor, npc) or dialogs_axr_companion.is_actor_friend(actor, npc)
end

-- OG_txr_paid_companions_is_squad_competent = txr_paid_companions.is_squad_competent
-- function txr_paid_companions.is_squad_competent(actor,npc)
-- 	local npc = dialogs.who_is_npc(actor,npc)

-- 	local squad = get_object_squad(npc)
-- 	if not (squad) then
-- 		return false
-- 	end

-- 	local section = squad:section_name()
-- 	--printf("-txr_paid_companions | squad on dialog - id: %s - section: %s", squad.id, section)
	
-- 	local rand = 0
-- 	dialog_squad[squad.id] = dialog_squad[squad.id] or {}
	
-- 	if string.find(section,"novice") then
-- 		rand = 100
-- 		dialog_squad[squad.id].money = dialog_squad[squad.id].money or (math.random(180,240)/100)
-- 	elseif string.find(section,"veteran") then
-- 		rand = 70
-- 		dialog_squad[squad.id].money = dialog_squad[squad.id].money or (math.random(180,240)/100)
-- 	elseif string.find(section,"advanced") then
-- 		rand = 40
-- 		dialog_squad[squad.id].money = dialog_squad[squad.id].money or (math.random(130,160)/100)
-- 	else
-- 		dialog_squad[squad.id].money = dialog_squad[squad.id].money or (math.random(80,120)/100)
-- 	end
	
	
-- 	if (dialog_squad[squad.id].can_work == "true") or ((dialog_squad[squad.id].can_work ~= "false") and (math.random(1,100) <= rand)) then
-- 		dialog_squad[squad.id].can_work = "true"
-- 		return true
-- 	end
	
-- 	dialog_squad[squad.id].can_work = "false"
-- 	return false
-- end


local function get_goodwill_inc(npc)
	local relation = npc:relation(db.actor)
	if relation == 1 then
		return 200
	elseif relation == 0 then
		return 50
	else
		return 0
	end
end

-- OG_xr_effects_complete_task_inc_goodwill = xr_effects.complete_task_inc_goodwill
-- function xr_effects.complete_task_inc_goodwill(actor,npc,p)
-- 	Printer:Log(LOG.INFO, CAT.NPC,"MP complete_task_inc_goodwill")
-- 	-- param1 - amount of goodwill to increase
-- 	-- param2+ - community
-- 	if npc then
-- 		Printer:Log(LOG.INFO, CAT.NPC, "complete_task_inc_goodwill npc %s %s", npc:id(), npc:character_name())
-- 	else
-- 		Printer:Log(LOG.ERROR, CAT.NPC, "complete_task_inc_goodwill no npc")
-- 	end
-- 	local multi = game_difficulties.get_eco_factor("goodwill") or 1
-- 	local amt = tonumber(p[1])*multi or 50
-- 	for i=2,#p do
-- 		xr_effects.inc_faction_goodwill_to_actor(db.actor, nil, {p[i], amt, true})
-- 	end
-- end

OG_xr_effects_inc_faction_goodwill_to_actor = xr_effects.inc_faction_goodwill_to_actor
function xr_effects.inc_faction_goodwill_to_actor(actor, npc, p)
	Printer:Log(LOG.ADD, CAT.NPC,"MP inc_faction_goodwill_to_actor")
	if npc then
		Printer:Log(LOG.INFO, CAT.NPC, "inc_faction_goodwill_to_actor npc %s %s", npc:id(), npc:character_name())
	else
		Printer:Log(LOG.ERROR, CAT.NPC, "inc_faction_goodwill_to_actor no npc")
	end
	OG_xr_effects_inc_faction_goodwill_to_actor(actor, npc, p)

-- personal goodwill is given only if completing the task in person 
if db.actor:is_talking() then
	local speaker = mob_trade.GetTalkingNpc()
	Printer:Log(LOG.ADD, CAT.NPC, "changing npc %s goodwill by %s", speaker:id(), get_goodwill_inc(speaker))
	speaker:change_goodwill(get_goodwill_inc(speaker), db.actor)
end
end

-- OG_xr_effects_inc_goodwill_by_tasker_id = xr_effects.inc_goodwill_by_tasker_id
-- function xr_effects.inc_goodwill_by_tasker_id(actor, npc, p)
-- -- param1 - task_id
-- -- param2 - amount of goodwill to increase
-- 	if not (p and p[1] and p[2]) then
-- 		return
-- 	end
-- 	Printer:Log(LOG.ADD, CAT.NPC,"MP inc_goodwill_by_tasker_id")
-- 	local tm = task_manager.get_task_manager()
-- 	local task_info = tm.task_info
-- 	local giver_id = task_info[p[1]].task_giver_id
-- 	local npc = giver_id and db.storage[giver_id] and db.storage[giver_id].object

-- 	if npc then
-- 		local comm = character_community(npc)
-- 		comm = (comm == "trader") and "stalker" or comm
-- 		local multi = game_difficulties.get_eco_factor("goodwill") or 1
-- 		local amt = tonumber(p[2])*multi or 50
-- 		xr_effects.inc_faction_goodwill_to_actor(db.actor, nil, {comm, amt, true})

-- 		Printer:Log(LOG.ADD, CAT.NPC, "changing npc %s goodwill by %s", npc:id(), get_goodwill_inc(npc))
-- 		npc:change_goodwill(get_goodwill_inc(npc), db.actor)
-- 	end
-- end

-- OG_xr_effects_inc_goodwill_by_tasker_comm = xr_effects.inc_goodwill_by_tasker_comm
-- function xr_effects.inc_goodwill_by_tasker_comm(actor,npc,p)
-- -- param1 - task_id
-- -- param2 - amount of goodwill to increase

-- 	if not (p and p[1] and p[2]) then
-- 		return
-- 	end
	
-- 	local var = load_var(db.actor, p[1])
-- 	local comm = var and var.task_giver_comm
-- 	if (not comm) and db.actor:is_talking() then 
-- 		local speaker = mob_trade.GetTalkingNpc()
-- 		comm = character_community(speaker)
-- 	end
-- 	if (not comm) then
-- 		printe("! ERROR %s | no community could be gathered")
-- 		return
-- 	end
	
-- 	comm = (comm == "trader") and "stalker" or comm
-- 	local multi = game_difficulties.get_eco_factor("goodwill") or 1
-- 	local amt = tonumber(p[2])*multi or 50
-- 	inc_faction_goodwill_to_actor(db.actor, nil, {comm, amt, true})

-- 	local speaker = mob_trade.GetTalkingNpc()
-- 	if speaker then
-- 		Printer:Log(LOG.ADD, CAT.NPC, "changing npc %s goodwill by %s", speaker:id(), get_goodwill_inc(speaker))
-- 		npc:change_goodwill(get_goodwill_inc(speaker), db.actor)
-- 	end
-- end

function get_dialog_ask_is_skilled(actor, npc)
	-- printf("actor %s npc %s", actor, npc)
	return game.translate_string("st_npcd_npc_dialogs_ask_is_skilled", true)
end

function get_dialog_skill_answer(actor, npc)
	-- printf("get_dialog_skill_answer actor %s npc %s", actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		if npcd.has_perks(npc:id()) then
			return game.translate_string("st_npcd_npc_dialogs_skill_answer_yes1", true)
		else
			return game.translate_string("st_npcd_npc_dialogs_skill_answer_no", true)
		end
	else
		return game.translate_string("st_npcd_npc_dialogs_skill_answer_no", true)
	end
end

function get_background()
	local id = math.random(2)
	return game.translate_string("st_npcd_npc_dialogs_ask_background" .. id, true)
end

function get_salute()
	return game.translate_string("st_npcd_npc_dialogs_salute", true)
end

function get_favorite()
	return game.translate_string("st_npcd_npc_dialogs_favorite", true)
end

function get_unfavorite()
	return game.translate_string("st_npcd_npc_dialogs_unfavorite", true)
end

function get_squad_salute()
	return game.translate_string("st_npcd_npc_dialogs_squad_salute", true)
end

function get_squad_favorite()
	return game.translate_string("st_npcd_npc_dialogs_squad_favorite", true)
end

function get_squad_unfavorite()
	return game.translate_string("st_npcd_npc_dialogs_squad_unfavorite", true)
end

function get_salute_noperks()
	return game.translate_string("st_npcd_npc_dialogs_salute_noperks", true)
end

function is_favorite(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		local favorite = npcd.get_favorite(npc:id())
		Printer:Debug(LOG.RUN, CAT.NPC,"is npc %s favorite %s", npc:id(), favorite)
		return favorite
	end
end

function is_unfavorite(actor, npc)
	return not is_favorite(actor, npc)
end

function set_favorite(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		Printer:Debug(LOG.RUN, CAT.NPC,"set npc %s favorite", npc:id())
		npcd.set_favorite(npc:id(), true)
	end
end

function set_unfavorite(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		Printer:Debug(LOG.RUN, CAT.NPC,"set npc %s unfavorite", npc:id())
		npcd.set_favorite(npc:id(), false)
	end
end

function get_npc_profile(actor, npc)
	return dialog_get_npc_profile(actor, npc)
end

function dialog_update_npc_info(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"update npc info")
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		npcd.set_show_profile(npc:id(), true)
		local npc_info = npcd.get_npc_info(npc:id())
		if npc_info then
			npc_info.last_time_seen = time_global()
			npc_info.last_smart_seen = nil -- TODO
			npcd.set_npc_info(npc:id(), npc_info)
		end
	end
end

function update_discovered(perk)
	if npcd.set_discovered(perk.id) then
		local npcd_notification = "ui_mcm_npcd_notification_perk_discovery"
		if perk.discovery_desc then
			npcd_notification = perk.discovery_desc
		end
		npcdu.print_tip(npcd_notification, 10000, perk.name and game.translate_string(perk.name))
	end
end

function dialog_get_npc_profile(actor, npc)
	Printer:Debug(LOG.RUN, CAT.NPC,"get npc profile")
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		local npc_id = npc:id()
		Printer:Log(LOG.RUN, CAT.CONF,"npc %s get profile", npc_id)
		local id = math.random(5)
		local profile_dialog = game.translate_string("st_npcd_npc_dialogs_background_response" .. id, true) .. "\\n \\n" 
		local npc_perks = npcd.get_npc_perks(npc_id)
		if npc_perks then
			for _, npc_perk in pairs(npc_perks) do
				local perk = npcd.get_perk(npc_perk.id, npc_id)
				local st_perk_name = game.translate_string(perk.name, true) or ""
				local st_perk_module = game.translate_string("ui_mcm_npcd_module_menu_" .. perk.module, true) or perk.module or ""
				profile_dialog = profile_dialog .. "\\n" .. string.format(game.translate_string("st_npcd_npc_dialogs_perk_desc"), st_perk_name, st_perk_module)
				profile_dialog = profile_dialog .. "\\n"
				if perk.dialog then
					profile_dialog = profile_dialog .. game.translate_string(perk.dialog, true)
				end
				profile_dialog = profile_dialog .. "\\n"

				-- check if perk is discovered and send notification if so
				update_discovered(perk)
			end
			return profile_dialog
		end
	end
	return game.translate_string("st_npcd_npc_dialogs_npc_has_no_perks", true)
end

--- NPC Joining Dialog API
--- 

-- Taken from Individually Recruitable Companions, written by G_FLAT credits to G_FLAT

-- Allows the player to recruit and hire stalkers as companions, one at a time, 
-- regardless of the size of the squad or if the stalker is the commander of the squad he belongs to.

-- Works by separating the stalker from his squad, by creating a clone and deleting the original.
-- The resulting clone is automatically added to the player's "companion squad"
-- In case of dismissal, the stalker can be re-recruited through the "vanilla" game dialogs. 

-- Custom Companion Squad Size by Catspaw compatibility
local custom_actor_squadsize 			= 2
local custom_actor_squadsize_folkhero 	= 4
local hascustomsquadsize				= false

function become_actor_companion_individually(actor, npc)
	
	local npc = dialogs.who_is_npc(actor, npc)
	local clone_id = npcd_squad.clone_stalker(npc)
	
	if clone_id then
		local npc_id = npc:id()

		local se_obj = alife_object(npc_id)
		safe_release_manager.release(se_obj)
		
		CreateTimeEvent("clone_become_companion_event", "clone_become_companion_" .. clone_id, 0, function(npc_id, clone_id)
			printf("clone_become_companion_" .. clone_id)
			local clone = level.object_by_id(clone_id)
			if clone then
				npcd_manager.ncpd_recruit(npc_id, clone_id)
				dialogs_axr_companion.become_actor_companion(db.actor, clone)
				db.actor:run_talk_dialog(clone)
				return true
			else
				return false
			end
		end, npc_id, clone_id)
	else
		actor:run_talk_dialog(npc)
	end

end

function become_paid_actor_companion_individually_and_register(actor, npc)
	
	local npc = dialogs.who_is_npc(actor, npc)
	local clone_id = npcd_squad.clone_stalker(npc)
	
	if clone_id then
		
		local se_obj = alife_object(npc:id())
		safe_release_manager.release(se_obj)
	
		CreateTimeEvent("clone_become_paid_companion_event", "clone_become_paid_companion_" .. clone_id, 0, function(id)
			local clone = level.object_by_id(id)
			if clone then
				npcd_manager.ncpd_recruit(npc_id, clone_id)
				dialogs_axr_companion.become_actor_companion(db.actor, clone)
				txr_paid_companions.register_paid_companion(db.actor, clone)
				db.actor:run_talk_dialog(clone)
				return true
			else
				return false
			end
		end, clone_id)
	else
		actor:run_talk_dialog(npc)
	end

end

-- precondition: must have at least one free spot 
function is_room_for_one_in_actor_squad(actor, npc)
	local max_size = 0

	-- Custom Companion Squad Size by Catspaw compatibility
	if hascustomsquadsize then
		if game_achievements.has_achievement("patriarch") then
			max_size = custom_actor_squadsize_folkhero
		else
			max_size = custom_actor_squadsize
		end
	else
		max_size = axr_companions.max_actor_squad_size + (game_achievements.has_achievement("patriarch") and 2 or 0)
	end

	if axr_companions.get_companion_count() + 1 <= max_size then
		return true
	end
	return false
end

-- precondition: don't show the new dialog for stalkers that are alone in a squad
function not_a_one_man_squad(actor, npc)
	if utils_obj.get_squad_count(npc) > 1 then
		return true
	end
	return false
end

-- precondition: is_actor_stronger
-- this makes it fine for grok's script to not be available, for non-gamma installs
function get_is_actor_stronger_if_script_is_available(actor, npc)
	if grok_get_companions then
		return grok_get_companions.is_actor_stronger(actor, npc)
	end
	return true
end

-- Hey friend, wanna leave your squad and come with me instead?
function get_friend_companion_ask_join_individually_text()
	return game.translate_string("st_friend_companion_ask_join_individually", true)
end

-- I can pay you to leave your squad and work as my escort, interested?
function get_paid_companion_dialog_text_individually_text()
	return game.translate_string("st_paid_companion_dialog_text_individually", true)
end

function actor_on_first_update()
    printf("$[NPCD][Main] npcd_dialogs actor_on_first_update")
end

function on_game_start()
	-- Custom Companion Squad Size by Catspaw compatibility
    printf("$[NPCD][Main] npcd_dialogs on_game_start")
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)	
    RegisterScriptCallback("npcd_started", update_settings)
	RegisterScriptCallback("on_option_change", update_settings)
	get_printer()
end

function update_settings()
	-- Custom Companion Squad Size by Catspaw compatibility
	if ui_mcm and custom_companion_squad_size then 
		custom_actor_squadsize 				= ui_mcm.get("customsquadsize/maxsquadsize")
		custom_actor_squadsize_folkhero 	= ui_mcm.get("customsquadsize/maxsquadsize_folkhero")
		hascustomsquadsize 					= true
	end
end