function on_game_start()
	RegisterScriptCallback("on_specific_character_dialog_list", function(character_id, dialog_list)
		if dialog_list:has("friendly_companion_dialog") then
			-- printf("-[NPCD][Main] Adding perk background dialog to npc %s dialog list", character_id)
			local res1 = dialog_list:add("npcd_dialogs_ask_npc_background")
		end
		-- if dialog_list:has("paid_companion_dialog") then
		-- 	local res2 = dialog_list:add("paid_companion_dialog_individually")
		-- end
	end)
end

function on_xml_read()
	RegisterScriptCallback("on_xml_read", function(xml_file_name, xml_obj)
		if (xml_file_name == [[gameplay\dialogs.xml]]) then
			printf("-[NPCD][Main] Build perk background dialog")
			local companion_dialogues = 
			[[
			<dialog id="npcd_dialogs_ask_npc_background">
				<precondition>dialogs_axr_companion.is_actor_friend</precondition>
				<precondition>dialogs_axr_companion.is_not_hostage_task_giver</precondition>
				<precondition>tasks_guide.not_prec_1</precondition>
				<phrase_list>
					<phrase id="0"> <!-- Actor ask if it's skilled -->
						<script_text>modxml_npcd_dialogs.get_dialog_ask_is_skilled</script_text>
						<action>npcd_manager.dialog_create_npc_profile</action>
						<next>1</next>
					</phrase>
					<phrase id="1"> <!-- NPC answer whether he is skilled or not -->
						<precondition>modxml_npcd_dialogs.npc_has_profile</precondition>
						<script_text>modxml_npcd_dialogs.get_dialog_skill_answer</script_text>
						<next>2</next>
						<next>42</next>
					</phrase>					
					<phrase id="2"> <!-- Actor ask background following answer 1-->
						<precondition>modxml_npcd_dialogs.npc_has_perks</precondition>
						<script_text>modxml_npcd_dialogs.get_background</script_text>
						<next>3</next>
					</phrase>
					<phrase id="3"> <!-- NPC answer background -->
						<precondition>modxml_npcd_dialogs.npc_has_perks</precondition>
						<script_text>modxml_npcd_dialogs.get_npc_profile</script_text>
						<next>411</next>
						<next>412</next>
					</phrase>
					<phrase id="411"> <!-- Actor -->
						<precondition>modxml_npcd_dialogs.npc_has_perks</precondition>
						<precondition>modxml_npcd_dialogs.npc_is_insquad</precondition>
						<script_text>modxml_npcd_dialogs.get_squad_salute</script_text>
					</phrase>
					<phrase id="412"> <!-- Actor -->
						<precondition>modxml_npcd_dialogs.npc_has_perks</precondition>
						<precondition>modxml_npcd_dialogs.npc_isnot_insquad</precondition>
						<script_text>modxml_npcd_dialogs.get_salute</script_text>
					</phrase>					
					<phrase id="42"> <!-- Actor -->
						<precondition>modxml_npcd_dialogs.npc_hasnot_perks</precondition>
						<script_text>modxml_npcd_dialogs.get_salute_noperks</script_text>
					</phrase>					
				</phrase_list>
			</dialog>
			]]

			xml_obj:insertFromXMLString(companion_dialogues)
		end
	end)
end

function npc_has_profile(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.get_npc(npc:id())
	end
	return false
end

function npc_hasnot_profile(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.get_npc(npc:id())
	end
	return false
end

function npc_has_perks(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd.has_perks(npc:id())
	end
	return false
end

function npc_hasnot_perks(actor, npc)
	return not npc_has_perks(actor, npc)
end

function npc_is_insquad(actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		return npcd_manager.is_actor_squad(npc:id())
	end
	return false
end

function npc_isnot_insquad(actor, npc)
	return not npc_is_insquad(actor, npc)
end

local asked_skills = false
function get_dialog_ask_is_skilled(actor, npc)
	-- printf("actor %s npc %s", actor, npc)
	return game.translate_string("st_npcd_npc_dialogs_ask_is_skilled", true)
	-- if npc_has_perks(actor, npc) then
	-- 	asked_skills = true
	-- 	return game.translate_string("st_npcd_npc_dialogs_ask_skills", true)
	-- else
	-- 	return game.translate_string("st_npcd_npc_dialogs_ask_is_skilled", true)
	-- end
end

function get_dialog_skill_answer(actor, npc)
	-- printf("get_dialog_skill_answer actor %s npc %s", actor, npc)
	local npc = dialogs.who_is_npc(actor, npc)
	if npc and npc:alive() then
		if npcd.has_perks(npc:id()) then -- and not asked_skills then
			return game.translate_string("st_npcd_npc_dialogs_skill_answer_yes1", true)
		-- elseif npcd.has_perks(npc:id()) and asked_skills then
		-- 	asked_skills = false
		-- 	return game.translate_string("st_npcd_npc_dialogs_skill_answer_yes2", true)
		else
			return game.translate_string("st_npcd_npc_dialogs_skill_answer_no", true)
		end
	else
		return game.translate_string("st_npcd_npc_dialogs_skill_answer_no", true)
	end
end

function get_background()
	local id = math.random(2)
	return game.translate_string("st_npcd_npc_dialogs_ask_background" .. id, true)
end

function get_salute()
	return game.translate_string("st_npcd_npc_dialogs_salute", true)
end

function get_squad_salute()
	return game.translate_string("st_npcd_npc_dialogs_squad_salute", true)
end

function get_salute_noperks()
	return game.translate_string("st_npcd_npc_dialogs_salute_noperks", true)
end

function get_npc_profile(actor, npc)
	return npcd_manager.dialog_get_npc_profile(actor, npc)
end