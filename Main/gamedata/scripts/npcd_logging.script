
-- app name
APP = { tag = "[NPCD]"}

-- log level

LEVEL = 0

-- log types
INFO = { tag = ""}
START = { tag = "$"}
STOP = { tag = "%"}
ERROR = { tag = "!"}
WARN = { tag = "~"}
ADD = { tag = "-"}
REMOVE = { tag = "*"}
RUN = { tag = "//"}

-- categories
CONF = { tag = "[CONF]", enabled = false}
PERK = { tag = "[PERK]", enabled = false}
NPC = { tag = "[NPC]", enabled = false}
ABILITY = { tag = "[ABILITY]", enabled = false}
EXEC = { tag = "[EXEC]", enabled = false}
ACTIV = { tag = "[ACTIV]", enabled = false}
COOLDOWN = { tag = "[COOLDOWN]", enabled = false}
KEYBINDS = { tag = "[KEYBINDS]", enabled = false}
-- EVENT = { tag = "[EVENT]", enabled = false}
-- ACTION = { tag = "[ACTION]", enabled = false}
UI = { tag = "[UI]", enabled = false}
UI_EXEC = { tag = "[UI_EXEC]", enabled = false}

function printlog(type,category,msg,...)
    if LEVEL > 0 then
        msg = msg or " "
        if not category.enabled then return end
        if type then
            msg = type.tag .. APP.tag .. category.tag  .. msg
        else
            msg = APP.tag .. category.tag  .. msg
        end
        if select('#', ...) ~= 0 then printf(string.format(msg,...))
        else printf(msg)
        end
    end
end

function printdebug(type,category, msg,...) -- debug logging
	if LEVEL > 1 then printlog(type,category, msg,...) end
end

function printtrace(type,category, msg,...) -- debug logging
	if LEVEL > 2 then printlog(type,category, msg,...) end
end


function print_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printlog(INFO, CONF, indent .. '' .. key .. ':')
            print_table(value, indent .. '  ')
        else
            printlog(INFO, CONF, indent .. key .. ': ' .. tostring(value))
        end
    end
end


local string_format = string.format
function printlog_table(text, node, ...)
    
    text = string_format(text, ...)
    printlog(INFO, CONF, "TABLE: | %s | \n" .. utils_data.print_table(node, text, true), time_global(), ...)
end

function debug_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printdebug(INFO, CONF,indent .. '' .. key .. ':')
            debug_table(value, indent .. '  ')
        else
            printdebug(INFO, CONF,indent .. key .. ': ' .. tostring(value))
        end
    end
end

function print_functor(functor)
    for i, v in ipairs(functor) do
        if type(v) == "table" then
            printtrace(INFO, EXEC,"Table at index " .. i .. ":")
            print_functor(v)
        else
            printtrace(INFO, EXEC,"Element at index " .. i .. ": " .. v)
        end
    end
end

PRINT = {
    log = printlog,
    debug = printdebug,
    trace = printtrace,
    table = print_table,
    log_table = printlog_table,
    debug_table = debug_table,
    functor = print_functor,
    LOG = {
        INFO = INFO,
        START = START,
        STOP = STOP,
        ERROR = ERROR,
        WARN = WARN,
        ADD = ADD,
        REMOVE = REMOVE,
        RUN = RUN,
    },
    CAT = {
        CONF = CONF,
        PERK = PERK,
        NPC = NPC,
        ABILITY = ABILITY,
        EXEC = EXEC,
        ACTIV = ACTIV,
        COOLDOWN = COOLDOWN,
        KEYBINDS = KEYBINDS,
        UI = UI,
        UI_EXEC = UI_EXEC,
    }
}

function get_printer()
    return PRINT
end

local function update_logs()

    LEVEL = tonumber(npcd_mcm.get_setting("logs", "logging_level"))
    printf("[NPCD] Log level: %s", tostring(LEVEL))
    -- categories
    CONF.enabled = npcd_mcm.get_setting("logs", "conf_logs")
    PERK.enabled = npcd_mcm.get_setting("logs", "perk_logs")
    NPC.enabled = npcd_mcm.get_setting("logs", "npc_logs")
    ABILITY.enabled = npcd_mcm.get_setting("logs", "ability_logs")
    EXEC.enabled = npcd_mcm.get_setting("logs", "exec_logs")
    ACTIV.enabled = npcd_mcm.get_setting("logs", "activ_logs")
    COOLDOWN.enabled = npcd_mcm.get_setting("logs", "cooldown_logs")
    KEYBINDS.enabled = npcd_mcm.get_setting("logs", "keybinds_logs")
    UI.enabled = npcd_mcm.get_setting("logs", "ui_logs")
    UI_EXEC.enabled = npcd_mcm.get_setting("logs", "ui_exec_logs")

    SendScriptCallback("npcd_on_log_update")
end

local function mcm_on_option_change()
    update_logs()
end

local function actor_on_first_update()
    printlog(RUN, CONF,"Actor on first update")
    SendScriptCallback("npcd_actor_on_first_update")
end
if AddScriptCallback then
    AddScriptCallback("npcd_on_log_update")
    AddScriptCallback("npcd_actor_on_first_update")
end
function on_game_start()
    RegisterScriptCallback("on_option_change", mcm_on_option_change)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    update_logs()
end