
-- app name
APP = { tag = "[NPCD]"}

-- log level

LEVEL = 1

-- log types
LOG = {
    INFO = { tag = ""},
    START = { tag = "$"},
    STOP = { tag = "%"},
    ERROR = { tag = "!"},
    WARN = { tag = "~"},
    ADD = { tag = "-"},
    REMOVE = { tag = "*"},
    RUN = { tag = "//"},
}
-- categories
CAT = {
    CONF = { tag = "[CONF]", enabled = true},
    PERK = { tag = "[PERK]", enabled = false},
    NPC = { tag = "[NPC]", enabled = false},
    FEAT = { tag = "[FEAT]", enabled = false},
    EXEC = { tag = "[EXEC]", enabled = false},
    ACTIV = { tag = "[ACTIV]", enabled = false},
    COOLDOWN = { tag = "[COOLDOWN]", enabled = false},
    KEYBINDS = { tag = "[KEYBINDS]", enabled = false},
    -- EVENT = { tag = "[EVENT]", enabled = false}
    -- ACTION = { tag = "[ACTION]", enabled = false}
    UI = { tag = "[UI]", enabled = false},
    UI_ACTION = { tag = "[UI_ACTION]", enabled = false},
}

local function printlog(module,type,category,msg,...)
    if LEVEL > 0 then
        msg = msg or " "
        module = ( module and ("[" .. module .. "]") ) or ""
        if not category.enabled then return end
        if type then
            msg = type.tag .. APP.tag .. module .. category.tag  .. msg
        else
            msg = APP.tag .. category.tag  .. msg
        end
        if select('#', ...) ~= 0 then printf(string.format(msg,...))
        else printf(msg)
        end
    end
end

local function printdebug(module,type,category,msg,...) -- debug logging
	if LEVEL > 1 then printlog(module,type,category,msg,...) end
end

local function printtrace(module,type,category,msg,...) -- debug logging
	if LEVEL > 2 then printlog(module,type,category,msg,...) end
end


local LOGGER_MODULE = {
    DEFAULT = "default",
    NPCD = "npcd"
}

local string_format = string.format
function printlog_table(module, text, node, ...)
    
    text = string_format(text, ...)
    printlog(module,LOG.INFO, CAT.CONF, "TABLE: | %s | \n" .. utils_data.print_table(node, text, true), time_global(), ...)
end

class "NPCDPrinter"
function NPCDPrinter:__init(module)
    if not module then module = LOGGER_MODULE.DEFAULT end
    self.module          = module
    if module == LOGGER_MODULE.NPCD or module == LOGGER_MODULE.DEFAULT then
        self.module_desc     = game.translate_string("ui_mcm_npcd_logger_" .. module)
        self.enabled         = npcd_mcm.get_setting("logs", module) or true
    else
        self.module_desc     = game.translate_string("ui_mcm_npcd_module_menu_" .. module)
        self.enabled         = npcd_mcm.get_module_setting(module, "main/logs")
    end
    
    printlog(self.module_desc, LOG.ADD, CAT.CONF, "Initializing NPCD Printer for module %s", module)
    printlog(self.module_desc, LOG.INFO, CAT.CONF, "NPCD Printer for module %s is %s", module, self.enabled and "enabled" or "disabled")
    RegisterScriptCallback('npcd_on_log_update', self)
end

function NPCDPrinter:Update()
    if self.module == LOGGER_MODULE.NPCD or self.module == LOGGER_MODULE.DEFAULT then
        self.enabled         = npcd_mcm.get_setting("logs", self.module) or true
    else
        self.enabled         = npcd_mcm.get_module_setting(self.module, "main/logs")
    end    
end

function NPCDPrinter:npcd_on_log_update()
    printlog(self.module_desc, LOG.RUN, CAT.CONF, "Updating NPCD Printer module %s", self.module)
    self:Update()
    printlog(self.module_desc, LOG.INFO, CAT.CONF, "NPCD Printer for module %s is %s", self.module, self.enabled and "enabled" or "disabled")
end

function NPCDPrinter:Log(type,category,msg,...)
    if self.enabled then
        printlog(self.module_desc,type,category,msg,...)        
    end
end
function NPCDPrinter:Debug(type,category,msg,...)
    if self.enabled then
        printdebug(self.module_desc,type,category,msg,...)
    end
end
function NPCDPrinter:Trace(type,category,msg,...)
    if self.enabled then
        printtrace(self.module_desc,type,category,msg,...)
    end
end
function NPCDPrinter:LogTable(text, node, ...)
    if self.enabled then
        printlog_table(self.module_desc,text, node, ...)
    end
end
function NPCDPrinter:GetLogTypes()
    return LOG
end
function NPCDPrinter:GetLogCategories()
    return CAT
end

function get_module_printer(module)
    return NPCDPrinter(module)
end

function get_npcd_printer()
    printf("/ NPCD Logging get_npcd_printer")
    return NPCDPrinter(LOGGER_MODULE.NPCD)
end

function update_logs()
    LEVEL = tonumber(npcd_mcm.get_setting("logs", "logging_level"))
    -- categories
    CAT.CONF.enabled = npcd_mcm.get_setting("logs", "conf_logs")
    CAT.PERK.enabled = npcd_mcm.get_setting("logs", "perk_logs")
    CAT.NPC.enabled = npcd_mcm.get_setting("logs", "npc_logs")
    CAT.FEAT.enabled = npcd_mcm.get_setting("logs", "feat_logs")
    CAT.EXEC.enabled = npcd_mcm.get_setting("logs", "exec_logs")
    CAT.ACTIV.enabled = npcd_mcm.get_setting("logs", "activ_logs")
    CAT.COOLDOWN.enabled = npcd_mcm.get_setting("logs", "cooldown_logs")
    CAT.KEYBINDS.enabled = npcd_mcm.get_setting("logs", "keybinds_logs")
    CAT.UI.enabled = npcd_mcm.get_setting("logs", "ui_logs")
    CAT.UI_ACTION.enabled = npcd_mcm.get_setting("logs", "ui_action_logs")

    SendScriptCallback("npcd_on_log_update")
end

function set_up()
    Printer = get_npcd_printer()
    update_logs()
end

function get_printer(npcd_script)
    Printer:Log(LOG.RUN, CAT.CONF,"%s get_printer", npcd_script)
    return Printer
end

local function mcm_on_option_change()
    update_logs()
end

local function actor_on_first_update()
    Printer:Log(LOG.RUN, CAT.CONF,"Logging actor_on_first_update")
end

function on_game_start()
    Printer:Log(LOG.START, CAT.CONF,"Logging on_game_start")
    RegisterScriptCallback("on_option_change", mcm_on_option_change)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end