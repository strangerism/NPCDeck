local npcdu = npcd_utils
local npcdm = npcd_manager
local NPCD = npcd
local FEAT_MODE = NPCD.FEAT_MODE
local FEAT_SETTING = NPCD.FEAT_SETTING
local KEYBIND = NPCD.KEYBIND

function on_mcm_load()
	op = { id = "actionbar", text = "ui_mcm_menu_npcd_actionbar", gr = get_actionbar_menu(),
    }
	return op, "npcd"
end

function get_actionbar_menu()

	local actionbar_menu = {}

	-- build actionbar main menu
    local main_options = {
        { id = "title", type = "slide", link = "ui_options_slider_player", text = "ui_mcm_npcd_actionbar_main_title", size = {512,50}, spacing = 20 },
        { id = "desc", type = "desc", clr = {200, 200, 255, 200}, text = "ui_mcm_npcd_actionbar_main_desc" },
		{ id = "max_slots", type = "input", val = 2, def = 8, min = 1, max = 16},
		{ id = "show_empty", type = "check", val = 1, def = true }
    }

	-- add main menu to actionbar menu
	local main_menu = { id="main", text="ui_mcm_menu_npcd_actionbar_main", sh=true, gr=main_options}
	table.insert(actionbar_menu, main_menu)

	-- add slots menu to actionbar menu
	local slots_options = {
        { id = "title", type = "slide", link = "ui_options_slider_player", text = "ui_mcm_npcd_actionbar_slots_title", size = {512,50}, spacing = 20 },
        { id = "desc", type = "desc", clr = {200, 200, 255, 200}, text = "ui_mcm_npcd_actionbar_slots_desc" },
    }
	table.insert(slots_options, { id = "divider", type = "line" })

	local actionbar = npcd_actionbar.get_actionbar()
	-- npcdu.printlog_table("on_mcm_load actionbar.by_key", actionbar.by_key)
	for key, action_slot in pairs(actionbar.by_key) do
		-- npcdu.printlog_table("on_mcm_load action_slot", action_slot)
		local npc = npcdu.get_npc_obj(action_slot.npc_id)
    	local feat = npcd.get_npc_feat(action_slot.npc_id, action_slot.feat_id)
        table.insert(slots_options, { id = action_slot.key .. "_feat", type = "slide", link = "ui_options_slider_gameplay_diff", text = feat.name, size = {512,50}, spacing = 5, borderless=false, })
        table.insert(slots_options, { id = action_slot.key .. "_npc", type = "desc", clr = {200, 180, 4, 219}, text = npc and npc:character_name() or npc_id })
		table.insert(slots_options, {id = action_slot.key .. "_" .. FEAT_SETTING.INDEX, type = "input", hint = "st_npcd_action_slot_index", val = 2, def = action_slot.index, min = 1, max = npcdm.settings.actionbar.max_slots})
		-- keybind
		local keybind_grp = {
			key_bind = {
				id = action_slot.key .. "_" .. FEAT_SETTING.KEYBIND.KEY,
				hint = "st_npcd_feat_keybind",
				default = feat and feat.activation_key.keybind or DIK_keys.DIK_H,
			},
			mode = {
				id = action_slot.key .. "_" .. FEAT_SETTING.KEYBIND.MODIFIER,
				default = feat and feat.activation_key.modifier or KEYBIND.MODIFIER.PRESS,
			},
			modifier = {
				id = action_slot.key .. "_" .. FEAT_SETTING.KEYBIND.SECOND_KEY,
				default = feat and feat.activation_key.second_key or KEYBIND.SECOND_KEY.NONE,
			}
		}
		npcd_mcm.add_keybind(slots_options, keybind_grp)
	end

	-- build slots menu
    local slots_menu = { id="slots", text="ui_mcm_menu_npcd_actionbar_slots", sh=true, gr=slots_options}

	table.insert(actionbar_menu, slots_menu)
	-- npcdu.printlog_table("on_mcm_load actionbar_menu", actionbar_menu)
	return actionbar_menu
end

function get_feat_activation_input(npc_id, feat)
    local activation_key = {
        keybind = npcd_mcm.get_setting("actionbar", "slots/" .. npc_id .. "_" .. feat.id .. "_" .. FEAT_SETTING.KEYBIND.KEY),
        modifier = npcd_mcm.get_setting("actionbar", "slots/" .. npc_id .. "_" .. feat.id .. "_" .. FEAT_SETTING.KEYBIND.MODIFIER),
        second_key = npcd_mcm.get_setting("actionbar", "slots/" .. npc_id .. "_" .. feat.id .. "_" .. FEAT_SETTING.KEYBIND.SECOND_KEY)

    }
    local feat_activation_input = {
        activation_key = activation_key,
        activation_functor = feat.activation_functor
    }
    return feat_activation_input
end

function get_feat_index_slot(npc_id, feat_id)
	return npcd_mcm.get_setting("actionbar", "slots/" .. npc_id .. "_" .. feat_id .. "_" .. FEAT_SETTING.INDEX)
end

function update_mcm_menu()
	local op, module = on_mcm_load()

	-- npcdu.printlog_table("update_mcm_menu npcd op", op)
	for i=1, #ui_mcm.options do
		if ui_mcm.options[i].id == module then
			printf("> menu %s ID %s", i, ui_mcm.options[i].id)
			for j=1, #ui_mcm.options[i].gr do
				if ui_mcm.options[i].gr[j].id == "actionbar" then
					printf("> submenu %s ID %s", j, ui_mcm.options[i].gr[j].id)
					ui_mcm.options[i].gr[j] = op
				end
			end
		end
	end
	ui_mcm.init_opt_coder()
	-- npcdu.printlog_table("update_mcm_menu", ui_mcm.options)
end