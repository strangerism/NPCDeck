function is_companions_squad_in_danger()
	--printf("============================================================================================")
	local squad_is_peaceful = true
	for id,squad in pairs(axr_companions.companion_squads) do 
		if (squad and squad.commander_id) then
			local i = 0
			for k in squad:squad_members() do
				local npc = db.storage[k.id] and db.storage[k.id].object
				i = i+1
				-- printf("companion[%s]", i)
				if npc then
					local is_peaceful = false
					-- check if is in fight
					if (npc and npc:alive()) then
						is_peaceful = (not npc:best_enemy()) and npc:dont_has_info("npcx_beh_ignore_combat") and true or false
					end
					-- printf("companion[%s] is_peaceful %s - dist: %s",k.id, is_peaceful, distance_between(db.actor,npc))
					-- check if is too far away
					squad_is_peaceful = squad_is_peaceful and is_peaceful
					-- printf("current calculation for squad is_peaceful %s", squad_is_peaceful)					
				end
				-- printf("--")
			end
		end
	end
	if not squad_is_peaceful then
		-- printf("squad is under attack or attacking")
	end
	--printf("squad is resolved peaceful %s", squad_is_peaceful)
	--printf("============================================================================================")
	return not squad_is_peaceful
end



local squad_is_peaceful
function actor_on_first_update()
    squad_is_peaceful = is_companions_squad_in_danger()
end


local tg_update = 0
local tg_update_step = 1000 --[ms]
function actor_on_update()

		local tg = time_global()
		if tg < tg_update then
			return
		end
		tg_update = tg + tg_update_step
		
		-- check_tagged_enemy()
		do_combat_on()

        local in_danger_state = is_companions_squad_in_danger()
		-- printf("squad_is_peaceful %s, in_danger_state %s", squad_is_peaceful, in_danger_state)
        if squad_is_peaceful and in_danger_state then
			-- printf("takepoint_combat_started")
            squad_is_peaceful = false
            SendScriptCallback("takepoint_combat_started")
            return
        end

        if not squad_is_peaceful and not in_danger_state then
			-- printf("takepoint_combat_ended")
            squad_is_peaceful = true
            SendScriptCallback("takepoint_combat_ended")
            return
        end

		-- printf("takepoint_combat_unknown")
end

function find_enemy()
	printf("- Find enemy")
	local be_list = {}
	for id,squad in pairs(axr_companions.companion_squads) do 
		if (squad and squad.commander_id) then
			local i = 0
			for k in squad:squad_members() do
				local npc = db.storage[k.id] and db.storage[k.id].object
				i = i+1
				-- printf("companion[%s]", i)
				if npc then
					local be = npc:best_enemy()
					if (be and be:alive()) then
						local distance = be:position():distance_to_sqr(npc:position())
						printf("! FOUND ENEMY: %s %s distance %s", be:id(), be:name(), distance)
						return be
						-- -- Add a new element
						-- table.insert(be_list, {be, distance})
					end
				end
			end
		end
	end

	-- local min_be = nil
	-- local min_distance = math.huge  -- Start with a very large number

	-- for _, pair in ipairs(be_list) do
	-- 	local be = pair[1]
	-- 	local distance = pair[2]

	-- 	if distance < min_distance then
	-- 		min_distance = distance
	-- 		min_be = be
	-- 	end
	-- end

	-- printf("-- ENEMY %s with smallest distance %s:", min_be and min_be:id(), min_distance)
	-- return min_be
end

local paw     = tasks_placeable_waypoints
local restore_hud_waypoint_settings
local restore_current_waypoint
function init_hud_waypoint()
	
    restore_hud_waypoint_settings = paw.wp_hud_icon_enabled or false
	printf("saving hud_waypoint_settings %s", restore_hud_waypoint_settings)
	paw.wp_hud_icon_enabled = true
	paw.show_hud_waypoint()
	restore_current_waypoint = paw.get_current_waypoint()
end

local tagged_enemy

function restore_hud_waypoint()

	if restore_current_waypoint then
		local se_obj = restore_current_waypoint:id() and alife_object(restore_current_waypoint:id())
		paw.set_current_waypoint(se_obj)
	end

	printf("restoring hud_waypoint_settings %s", restore_hud_waypoint_settings)
	paw.wp_hud_icon_enabled = restore_hud_waypoint_settings

	if (paw.wp_hud_icon_enabled) then
		paw.show_hud_waypoint()
	else
		paw.hide_hud_waypoint()
	end
end

function tag_enemy(enemy)
	printf("- Tag enemy %s", enemy and enemy:id())
    if (enemy and enemy:alive()) then
		local se_obj = enemy:id() and alife_object(enemy:id())
		paw.set_current_waypoint(se_obj)
        tagged_enemy = enemy
	end
end

function check_tagged_enemy()

	if tagged_enemy then
		-- printf("- check_tagged_enemy %s", tagged_enemy and tagged_enemy:id())
		if not tagged_enemy:alive() then
			tagged_enemy = nil
			local enemy = find_enemy()
			tag_enemy(enemy)
		end
	end
end

function combat_started()
    printf("- TAKE POINT COMBAT [START]")

	-- setup paw backend
	init_hud_waypoint()
	
	-- do the first spotting
	local enemy = find_enemy()
	tag_enemy(enemy)
end

function do_combat_on()
	if squad_is_peaceful then return end

	if tagged_enemy then
		if not tagged_enemy:alive() then
			tagged_enemy = nil
		end
	else
		printf("- TAKE POINT COMBAT [TAG]")
		local enemy = find_enemy()
		tag_enemy(enemy)
	end
end

function combat_ended()
    printf("! TAKE POINT COMBAT [END]")

	-- release paw backend
	restore_hud_waypoint()
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_update",actor_on_update)

    if AddScriptCallback then
        AddScriptCallback("takepoint_combat_started")
        AddScriptCallback("takepoint_combat_ended")
    end

    RegisterScriptCallback("takepoint_combat_started",combat_started)
    RegisterScriptCallback("takepoint_combat_ended",combat_ended)
end