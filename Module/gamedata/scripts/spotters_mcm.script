local NPCD = npcd
local PERK_TYPE = NPCD.PERK_TYPE
local FEAT_TYPE = NPCD.FEAT_TYPE
local FEAT_MODE = NPCD.FEAT_MODE


local module_perks = {
	["perk_spotter"] = {
		id = "perk_spotter",
		type = PERK_TYPE.ARCHETYPE,
		name = "st_npcd_perk_spotter",
		description = "st_npcd_perk_spotter_desc",
		mcm_menu_name = "ui_mcm_npcd_module_menu_spotters_perks_spotter",
		mcm_menu = {
			{ id = "perk_chance", type = "track", val = 2, min = 1, max = 100, step = 1, def = 10},
		},
		icon = "ui_icons_spotter_pin_redskull",
		category 		= "st_npcd_perk_archetype",
		roll_success_desc = "ui_mcm_npcd_module_spotters_notification_has_perk",
		feats = {

			["perk_spotter_callmark"] = {
				id = "perk_spotter_callmark",
				name = "st_npcd_perk_spotter_callmark",
				description = "st_npcd_perk_spotter_callmark_desc",
				type = FEAT_TYPE.ACTIVE,
				mode = FEAT_MODE.MANUAL,
				icon = "ui_icons_spotter_pin_redskull",
				icon_hud = "ui_icons_spotter_pin_redskull",
				icon_slot = "ui_icons_spotter_pin_redskull",
				req_level       = 3,
				max_level       = 4,
				each_level      = 4,
				category 		= "st_npcd_perk_spotter",
				stats = {
					[1] = {
						cooldown = 180,
						life = 30
					},
					[2] = {
						cooldown = 180,
						life = 60
					},
					[3] = {
						cooldown = 150,
						life = 80
					},
					[4] = {
						cooldown = 120,
						life = 100
					}
				},
				activation_functor = {"spotters","callmark"},
			},

			["perk_spotter_spot"] = {
				id = "perk_spotter_spot",
				name = "st_npcd_perk_spotter_spot",
				description = "st_npcd_perk_spotter_spot_desc",
				type = FEAT_TYPE.ACTIVE,
				mode = FEAT_MODE.AUTO,
				icon = "ui_icons_spotter_crosshair_gradient",
				icon_hud = "ui_icons_spotter_crosshair_gradient",
				icon_slot = "ui_icons_spotter_crosshair_gradient",
				req_level       = 1,
				max_level       = 4,
				each_level      = 4,
				category 		= "st_npcd_perk_spotter",			
				stats = {
					[1] = {
						cooldown = 30,
						life = 10,
						marks_limit = 1
					},
					[2] = {
						cooldown = 25,
						life = 10,
						marks_limit = 2
					},
					[3] = {
						cooldown = 20,
						life = 15,
						marks_limit = 3
					},
					[4] = {
						cooldown = 15,
						life = 15,
						marks_limit = 4
					}
				},
				activation_functor = {"spotters_mcm","spot"},
			}
		},
		roll_functor = {"spotters","roll_perk"},
	}
}

local main_menu = {
	{ id = "help1", type = "desc", clr = {200, 200, 255, 200}, text="ui_mcm_npcd_module_spotters_main_help1"},
	{ id = "help2", type = "desc", clr = {200, 200, 255, 200}, text="ui_mcm_npcd_module_spotters_main_help2"},
	{ id = "help3", type = "desc", clr = {200, 200, 255, 200}, text="ui_mcm_npcd_module_spotters_main_help3"},
	{ id = "help4", type = "desc", clr = {200, 200, 255, 200}, text="ui_mcm_npcd_module_spotters_main_help4"},
	{ id = "hotkey", type = "key_bind", val = 2, def = DIK_keys.DIK_C },
	{ id = "divider", type = "line" },
	{ id = "marker_life"  	, type = "track"    , val = 2, min = 1, max = 60, step = 1, def = 15},
	{ id = "keep_spotting"  	, type ="check", val=1,def=false},
	{ id = "max_marks"  	, type = "track"    , val = 2, min = 1, max = 5, step = 1, def = 1},
	{ id = "bark"  	, type ="check", val=1,def=true},
}

local deck = {
    title = "Spotters Perks Deck",
    module= "spotters",
    id="spotters",
    mcm_menu_name = "ui_mcm_npcd_module_menu_spotters",
    mcm_menu_title = "ui_mcm_npcd_module_spotters_title",
    mcm_menu_desc = "ui_mcm_npcd_module_spotters_desc",
	perks = module_perks,
	mcm_menu = main_menu,
}

---------------------------------------------------------------- api for use by module scripts
--- 

--- use getters for module mcm settings
function get_main_setting(var_name)
	return npcd_mcm.get_module_setting(deck.module, "main/" .. var_name)
end
function get_perk_setting(perk_id, var_name)
	return npcd_mcm.get_module_setting(deck.module, perk_id .. "/" .. var_name)
end

-- use NPCD printer for logging
function get_printer()
	return npcd_logging.get_module_printer(deck.module)
end

-- use IDs for quick reference in query apis
ID = {
	PERK = {
		SPOTTER = "perk_spotter",
	},
	FEAT = {
		CALLMARK = "perk_spotter_callmark",
		SPOT = "perk_spotter_spot",
	}
}

-- perk query apis
function get_perk(perk_id)
	return npcd.get_perk(perk_id)
end
function get_perk_feats(perk_id)
	return npcd.get_perk_feats(perk_id)
end
function get_perk_feat(perk_id, feat_id)
	return npcd.get_perk_feat(perk_id, feat_id)
end
function get_perk_ranked_feat_stat(perk_id, feat_id, rank, stat_name)
	if not rank or not stat_name then return end
	local feat = npcd.get_perk_feat(perk_id, feat_id)
	if not feat or not feat.stats and not feat.stats[rank]  then return end
	return feat.stats[rank][stat_name]
end
----

function on_mcm_load()
	op = { id = deck.id, text = deck.mcm_menu_name, gr = npcd_mcm.get_module_menu(deck) }
	-- npcd_utils.printlog_table("MCM Module Menu", op)
    return op, "npcd_module"
end

function on_game_start()
	npcd_manager.register_module(deck)
end